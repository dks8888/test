--SET SCHEMA BARS_N1; 
--SET PATH QSYS,QSYS2,DWH,BARS_N1;
--CALL DROPPROC_IF_EXISTS('BARS_N1','FILL_DM_ASSETS_F');

CREATE PROCEDURE FILL_DM_ASSETS_F(
  @v_TO_DATE DATE,
  @v_ORDER_ID BIGINT,
  @v_PROCEDURE_CODE VARCHAR(128)
)
LANGUAGE SQL

BEGIN

	DECLARE @V_PROC_NAME VARCHAR ( 100 ) DEFAULT 'FILL_DM_ASSETS_F' ;
	DECLARE @V_LSQLCODE INT DEFAULT 0 ;
	DECLARE @V_LSQLSTATE CHAR ( 5 ) DEFAULT '00000' ;
	DECLARE @V_LTEXT VARCHAR ( 1024 ) ;
	DECLARE @V_ERROR_PARAMETERS VARCHAR ( 1024 ) ;

	DECLARE @V_LOG_PARAMETERS VARCHAR ( 1024 ) ;
	DECLARE @V_CNT INT ;
	DECLARE @V_NEED_TEST CHAR(1);
	DECLARE @LOST_LOADER INT;
	DECLARE @v_SYS_TBL_NAME CHAR(10);

	DECLARE @V_MAX_RATE DECIMAL(30,8);
	DECLARE @V_MIN_RATE DECIMAL(30,8);
  
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
		@V_LSQLCODE = DB2_RETURNED_SQLCODE ,
		@V_LSQLSTATE = RETURNED_SQLSTATE ,
		@V_LTEXT = MESSAGE_TEXT ;
		SET @V_ERROR_PARAMETERS = TRIM ( CHAR ( @V_LSQLCODE ) ) || ';' || @V_LSQLSTATE || ';' || @V_LTEXT ;
		CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'ERR' , 'MART_ERROR' , @V_ERROR_PARAMETERS ) ;
		COMMIT ;
		RESIGNAL SQLSTATE @V_LSQLSTATE SET MESSAGE_TEXT = @V_LTEXT ;
	END ;
  
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'BEG' , 'MART_START' , NULL ) ;
	CALL SET_OPTIMIZE_PARAMS();
  
	DELETE FROM DM_ASSETS_F WHERE TO_DATE = @V_TO_DATE ;
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'DM_ASSETS_F;' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'MART_DELETED_DATA' , @V_LOG_PARAMETERS ) ;

	SET @v_SYS_TBL_NAME = (SELECT SYSTEM_TABLE_NAME FROM QSYS2.SYSTABLES WHERE TABLE_SCHEMA = CURRENT_SCHEMA AND TABLE_NAME='DM_ASSETS_F');
	CALL RGZPFMPR(CURRENT_SCHEMA,@v_SYS_TBL_NAME);
	SET @v_LOG_PARAMETERS='DM_ASSETS_F;';
	CALL LG_MART_ADD(@v_TO_DATE,@v_ORDER_ID,@v_PROC_NAME,'INF','MART_REORGANIZE_INDEX',@v_LOG_PARAMETERS);

	SET @V_NEED_TEST =  (
		SELECT VALUE FROM SET_LIST_DATA 
		WHERE LIST_CODE='AR_NEED_TEST' 
			AND @V_TO_DATE BETWEEN DATE_FROM AND DATE_TO
	);

	SET @V_MAX_RATE = (
		SELECT decimal(VALUE,30,8) FROM SET_LIST_DATA 
		WHERE LIST_CODE='MAX_RATE' 
			AND @V_TO_DATE BETWEEN DATE_FROM AND DATE_TO
	);
  
	SET @V_MIN_RATE = (
		SELECT decimal(VALUE,30,8) FROM SET_LIST_DATA 
		WHERE LIST_CODE='MIN_RATE' 
			AND @V_TO_DATE BETWEEN DATE_FROM AND DATE_TO
	);

	SET @LOST_LOADER = (
		SELECT WORKFLOW_PROCEDURE_LIST.ID FROM WORKFLOW_PROCEDURE_MAP
			JOIN WORKFLOW_PROCEDURE_LIST 
				ON WORKFLOW_PROCEDURE_LIST.PROCEDURE_CODE = WORKFLOW_PROCEDURE_MAP.PROCEDURE_CODE
		WHERE WORKFLOW_PROCEDURE_MAP.PROCEDURE_NAME = 'FILL_DM_ACCOUNT_LOST_LINK'
	);

	DECLARE GLOBAL TEMPORARY TABLE SESSION . CAP_ACC_EXCL -- для исключения счетов капитала #2142
	(
		ACCOUNT_RK BIGINT
	) WITH REPLACE NOT LOGGED;

	INSERT INTO  SESSION . CAP_ACC_EXCL
	SELECT
		DM_ACCOUNT.ACCOUNT_RK
	FROM DM_ACCOUNT
		JOIN IDNT_ACCOUNT 
			ON IDNT_ACCOUNT.ACCOUNT_RK= DM_ACCOUNT.ACCOUNT_RK
		JOIN SET_LIST_DATA 
			ON LIST_CODE='AR_EXCLUDE_CAPITAL_ACC' 
				AND SET_LIST_DATA.VALUE = IDNT_ACCOUNT.EXTERNAL_PK
				AND @V_TO_DATE BETWEEN SET_LIST_DATA.DATE_FROM AND SET_LIST_DATA.DATE_TO
	WHERE DM_ACCOUNT.TO_DATE=@V_TO_DATE;

	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.CAP_ACC_EXCL;' || @V_CNT ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	CREATE INDEX SESSION.CAP_ACC_EXCL_IND ON SESSION.CAP_ACC_EXCL( ACCOUNT_RK  );

  
	DECLARE GLOBAL TEMPORARY TABLE SESSION . TMP_ACCOUNT_RK
	(
		ACCOUNT_RK BIGINT
	) WITH REPLACE NOT LOGGED;

	INSERT INTO SESSION . TMP_ACCOUNT_RK  
	SELECT
		DM_ACCOUNT . ACCOUNT_RK
	FROM DM_ACCOUNT
		EXCEPTION JOIN SET_LIST_DATA SET_LIST_DATA1 
			ON SET_LIST_DATA1 . VALUE = DM_ACCOUNT . LEDGER_ACCOUNT
				AND SET_LIST_DATA1 . LIST_CODE = 'AR_EXCLUDE_ACTIVE_BS2_LIST'
				AND @V_TO_DATE BETWEEN SET_LIST_DATA1 . DATE_FROM AND SET_LIST_DATA1 . DATE_TO
		EXCEPTION JOIN SET_LIST_DATA SET_LIST_DATA2 
			ON SET_LIST_DATA2 . VALUE = DM_ACCOUNT . LEDGER_ACCOUNT
				AND SET_LIST_DATA2 . LIST_CODE = 'ASSET_BS2_LIST'
				AND @V_TO_DATE BETWEEN SET_LIST_DATA2 . DATE_FROM AND SET_LIST_DATA2 . DATE_TO
		EXCEPTION JOIN SESSION . CAP_ACC_EXCL  CAP_ACC_EXCL 
			ON CAP_ACC_EXCL.ACCOUNT_RK = DM_ACCOUNT.ACCOUNT_RK
	WHERE DM_ACCOUNT . TO_DATE = @V_TO_DATE
		AND DM_ACCOUNT . CHAR_TYPE = 'А'
		AND DM_ACCOUNT . CHAPTER = 'А' ;
  
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.TMP_ACCOUNT_RK;' || @V_CNT ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	INSERT INTO SESSION . TMP_ACCOUNT_RK  
	SELECT
		DM_ACCOUNT . ACCOUNT_RK
	FROM DM_ACCOUNT
		JOIN SET_LIST_DATA SET_LIST_DATA1 
			ON SET_LIST_DATA1 . VALUE = DM_ACCOUNT . LEDGER_ACCOUNT
				AND SET_LIST_DATA1 . LIST_CODE = 'AR_INCLUDE_PASSIVE_BS2_LIST'
				AND @V_TO_DATE BETWEEN SET_LIST_DATA1 . DATE_FROM AND SET_LIST_DATA1 . DATE_TO
			EXCEPTION JOIN SET_LIST_DATA SET_LIST_DATA2 
				ON SET_LIST_DATA2 . VALUE = DM_ACCOUNT . LEDGER_ACCOUNT
					AND SET_LIST_DATA2 . LIST_CODE = 'ASSET_BS2_LIST'
					AND @V_TO_DATE BETWEEN SET_LIST_DATA2 . DATE_FROM AND SET_LIST_DATA2 . DATE_TO
			EXCEPTION JOIN SESSION . CAP_ACC_EXCL  CAP_ACC_EXCL 
				ON CAP_ACC_EXCL.ACCOUNT_RK = DM_ACCOUNT.ACCOUNT_RK
	WHERE DM_ACCOUNT . TO_DATE = @V_TO_DATE
		AND DM_ACCOUNT . CHAR_TYPE = 'П' ;
  
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.TMP_ACCOUNT_RK;' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	DROP INDEX SESSION.CAP_ACC_EXCL_IND;
	DROP TABLE SESSION . CAP_ACC_EXCL;
  
	----------------------------------- test table
	IF @V_NEED_TEST = 'Y'
	THEN 

		delete from TMP_ACCOUNT_RK
		where to_date = @V_TO_DATE;

		GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
		SET @V_LOG_PARAMETERS = 'SESSION.TMP_ACCOUNT_RK ;' || CHAR ( @V_CNT ) ;
		CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_DELETED_DATA' , @V_LOG_PARAMETERS ) ;

		INSERT INTO TMP_ACCOUNT_RK
		select
			@V_TO_DATE, TMP_ACCOUNT_RK.*
		from SESSION . TMP_ACCOUNT_RK TMP_ACCOUNT_RK;

		GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
		SET @V_LOG_PARAMETERS = 'SESSION.TMP_ACCOUNT_RK;' || CHAR ( @V_CNT ) ;
		CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	end if;
	--------------------------------------
  
	DECLARE GLOBAL TEMPORARY TABLE SESSION . TMP_AR_ACCOUNTS
	( 
		ACCOUNT_RK BIGINT ,
		LEDGER_ACCOUNT CHAR ( 5 ) ,
		BANK_PLAN_CODE CHAR ( 20 ) ,
		CUSTOMER_RK BIGINT ,
		AMOUNT_RUB DECIMAL ( 22 , 0 ) ,
		CURRENCY_CODE CHAR ( 3 )
	) WITH REPLACE NOT LOGGED;
  
	INSERT INTO SESSION . TMP_AR_ACCOUNTS
	SELECT
		DM_ACCOUNT . ACCOUNT_RK ,
		DM_ACCOUNT . LEDGER_ACCOUNT ,
		DM_ACCOUNT . BANK_PLAN_CODE ,
		DM_ACCOUNT . CUSTOMER_RK ,
		CASE WHEN DM_ACCOUNT . CHAR_TYPE = 'П' THEN 
			ABS ( DM_BALANCE . AMOUNT_RUB ) * ( - 1 )
		ELSE 
			ABS ( DM_BALANCE . AMOUNT_RUB ) 
		END ,
		DM_ACCOUNT . CURRENCY_CODE
	FROM SESSION . TMP_ACCOUNT_RK TMP_ACCOUNT_RK
		JOIN DM_ACCOUNT DM_ACCOUNT 
			ON DM_ACCOUNT . ACCOUNT_RK = TMP_ACCOUNT_RK . ACCOUNT_RK
				AND DM_ACCOUNT . TO_DATE = @V_TO_DATE
		JOIN DM_BALANCE 
			ON DM_BALANCE . TO_DATE = @V_TO_DATE
				AND DM_BALANCE . ACCOUNT_RK = DM_ACCOUNT . ACCOUNT_RK 
				AND DM_BALANCE . AMOUNT_RUB <> 0
	;
  
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.TMP_AR_ACCOUNTS;' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
  
	DROP TABLE SESSION.TMP_ACCOUNT_RK;
  
	INSERT INTO SESSION . TMP_AR_ACCOUNTS (
		LEDGER_ACCOUNT ,
		AMOUNT_RUB
	)
	SELECT
		DM_LEDGER_BALANCE_F . LEDGER_ACCOUNT ,
		CASE WHEN DM_LEDGER_BALANCE_F . CHAR_TYPE = 'П' THEN 
			ABS ( DM_LEDGER_BALANCE_F . AMOUNT_RUB ) * ( - 1 )
		ELSE 
			ABS ( DM_LEDGER_BALANCE_F . AMOUNT_RUB ) 
		END
	FROM DM_LEDGER_BALANCE_F
		JOIN SET_LIST_DATA SET_LIST_DATA1 
			ON SET_LIST_DATA1 . VALUE = DM_LEDGER_BALANCE_F . LEDGER_ACCOUNT
				AND SET_LIST_DATA1 . LIST_CODE = 'ASSET_BS2_LIST'
				AND @V_TO_DATE BETWEEN SET_LIST_DATA1 . DATE_FROM AND SET_LIST_DATA1 . DATE_TO
		EXCEPTION JOIN SET_LIST_DATA SET_LIST_DATA2 
			ON SET_LIST_DATA2 . VALUE = DM_LEDGER_BALANCE_F . LEDGER_ACCOUNT
				AND SET_LIST_DATA2 . LIST_CODE = 'AR_EXCLUDE_ACTIVE_BS2_LIST'
				AND @V_TO_DATE BETWEEN SET_LIST_DATA2 . DATE_FROM AND SET_LIST_DATA2 . DATE_TO
				AND DM_LEDGER_BALANCE_F . CHAR_TYPE = 'А'
				AND DM_LEDGER_BALANCE_F . CHAPTER = 'А'
		EXCEPTION JOIN SET_LIST_DATA SET_LIST_DATA3 
			ON SET_LIST_DATA3 . VALUE = DM_LEDGER_BALANCE_F . LEDGER_ACCOUNT
				AND SET_LIST_DATA3 . LIST_CODE = 'AR_INCLUDE_PASSIVE_BS2_LIST'
				AND @V_TO_DATE BETWEEN SET_LIST_DATA3 . DATE_FROM AND SET_LIST_DATA3 . DATE_TO
				AND DM_LEDGER_BALANCE_F . CHAR_TYPE = 'П'
	WHERE DM_LEDGER_BALANCE_F . TO_DATE = @V_TO_DATE ;
  
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.TMP_AR_ACCOUNTS;' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	------------------------------------------------------ test table
	IF @V_NEED_TEST = 'Y' THEN 

		delete from TMP_AR_ACCOUNTS
		where to_date = @V_TO_DATE;

		GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
		SET @V_LOG_PARAMETERS = 'TMP_AR_ACCOUNTS;' || CHAR ( @V_CNT ) ;
		CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_DELETED_DATA' , @V_LOG_PARAMETERS ) ;

		INSERT INTO TMP_AR_ACCOUNTS
		select
			@V_TO_DATE, 
			TMP_AR_ACCOUNTS.*
		from SESSION . TMP_AR_ACCOUNTS TMP_AR_ACCOUNTS;

		GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
		SET @V_LOG_PARAMETERS = 'TMP_AR_ACCOUNTS;' || CHAR ( @V_CNT ) ;
		CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	end if;
	------------------------------------------------------


-- 4.1.1.4
  
	-----------
	DECLARE GLOBAL TEMPORARY TABLE SESSION.DM_MAIN_ACCOUNT_LINK LIKE DM_ACCOUNT_LINK WITH REPLACE NOT LOGGED;

	DECLARE GLOBAL TEMPORARY TABLE SESSION.DEAL_EXCL
	(
		DEAL_RK BIGINT
	) WITH REPLACE NOT LOGGED;

	INSERT INTO SESSION.DEAL_EXCL
	SELECT 
		DEAL_RK 
	FROM DM_ACCOUNT_LINK 
	WHERE TO_DATE = @v_TO_DATE 
		AND ACCOUNT_TYPE_ID = 1
	GROUP BY DEAL_RK
	HAVING COUNT(1)>1;          
  
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.DEAL_EXCL;' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	INSERT INTO SESSION.DM_MAIN_ACCOUNT_LINK
	SELECT 
		DM_ACCOUNT_LINK.* 
	FROM DM_ACCOUNT_LINK 
		EXCEPTION JOIN SESSION.DEAL_EXCL DEAL_EXCL 
			ON DEAL_EXCL.DEAL_RK = DM_ACCOUNT_LINK.DEAL_RK
	WHERE TO_DATE = @v_TO_DATE 
		AND ACCOUNT_TYPE_ID = 1;
  
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.DM_MAIN_ACCOUNT_LINK (1);' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
  
	INSERT INTO SESSION.DM_MAIN_ACCOUNT_LINK
	SELECT 
		DM_ACCOUNT_LINK.* 
	FROM DM_ACCOUNT_LINK 
		JOIN SESSION.DEAL_EXCL DEAL_EXCL 
			ON DEAL_EXCL.DEAL_RK = DM_ACCOUNT_LINK.DEAL_RK
	WHERE TO_DATE=@v_TO_DATE 
		AND AMOUNT_RUB <> 0 
		AND ACCOUNT_TYPE_ID = 1;
  
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.DM_MAIN_ACCOUNT_LINK (2);' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
  
	DROP TABLE SESSION.DEAL_EXCL;
  
	CREATE INDEX SESSION.DM_MAIN_ACCOUNT_LINK_IND ON SESSION.DM_MAIN_ACCOUNT_LINK
	(
		DEAL_RK
	);
  
	---------------- тикет #1985
  
	DECLARE GLOBAL TEMPORARY TABLE SESSION . TMP_DEAL
	(
		DEAL_RK BIGINT ,
		ACCOUNT_RK BIGINT ,
		MAIN_LEDGER_ACCOUNT CHAR ( 5 ) ,
		ASSET_TYPE VARCHAR ( 100 ) ,
		ACCOUNT_TYPE_ID SMALLINT ,
		DEAL_AMOUNT_RUB DECIMAL ( 22 , 0 ) ,
		AMOUNT_RUB DECIMAL ( 22 , 0 ) ,
		RATE DECIMAL ( 30 , 8 )
	) WITH REPLACE NOT LOGGED;
  
	INSERT INTO SESSION . TMP_DEAL
	SELECT
		DM_ACCOUNT_LINK . DEAL_RK ,
		DM_ACCOUNT_LINK . ACCOUNT_RK ,
		DM_ACCOUNT . LEDGER_ACCOUNT ,
		CASE WHEN DM_REPO . DEAL_RK IS NOT NULL THEN 
			TRIM ( IDNT_DEAL . DEAL_TYPE ) || DM_REPO . REPO_TYPE
		WHEN 
			IDNT_DEAL . DEAL_RK IS NOT NULL THEN IDNT_DEAL . DEAL_TYPE
		ELSE 
			'OTH'
		END ,
		DM_ACCOUNT_LINK . ACCOUNT_TYPE_ID ,
		DM_ACCOUNT_LINK . AMOUNT_RUB ,
		TMP_AR_ACCOUNTS . AMOUNT_RUB ,
		CASE WHEN VALUE ( TMP_AR_ACCOUNTS . AMOUNT_RUB , 0 ) = 0 THEN 
			0
		ELSE 
			CASE WHEN DM_ACCOUNT_LINK .DEAL_RK = -1 
				AND TMP_AR_ACCOUNTS.AMOUNT_RUB > 0 
				AND DM_ACCOUNT_LINK . AMOUNT_RUB >0 -- ЕСЛИ СЧЕТ АКТИВНЫЙ И КОРРЕКТИРОВКА ПОЛОЖИТЕЛЬНАЯ
            THEN 
				ROUND(DM_ACCOUNT_LINK . AMOUNT_RUB /  TMP_AR_ACCOUNTS . AMOUNT_RUB , 8) * (-1)
			WHEN DM_ACCOUNT_LINK .DEAL_RK = -1 
				AND TMP_AR_ACCOUNTS.AMOUNT_RUB < 0 
				AND DM_ACCOUNT_LINK . AMOUNT_RUB < 0 -- ЕСЛИ СЧЕТ ПАССИВНЫЙ И КОРРЕКТИРОВКА ОТРИЦАТЕЛЬНАЯ
            THEN 
				ROUND(DM_ACCOUNT_LINK . AMOUNT_RUB /  TMP_AR_ACCOUNTS . AMOUNT_RUB , 8) * (-1)
			WHEN DM_ACCOUNT_LINK .LOADER = @LOST_LOADER  
				AND TMP_AR_ACCOUNTS.AMOUNT_RUB > 0 
				AND DM_ACCOUNT_LINK . AMOUNT_RUB > 0 
            THEN 
				ROUND(DM_ACCOUNT_LINK . AMOUNT_RUB /  TMP_AR_ACCOUNTS . AMOUNT_RUB , 8) * (-1) -- ЕСЛИ СЧЕТ АКТИВНЫЙ И КОРРЕКТИРОВКА ПОЛОЖИТЕЛЬНАЯ И ПРИШЛА из LOST_LINK
			WHEN DM_ACCOUNT_LINK .LOADER = @LOST_LOADER 
				AND TMP_AR_ACCOUNTS.AMOUNT_RUB < 0 
				AND DM_ACCOUNT_LINK . AMOUNT_RUB < 0 
            THEN 
				ROUND(DM_ACCOUNT_LINK . AMOUNT_RUB /  TMP_AR_ACCOUNTS . AMOUNT_RUB , 8) * (-1) -- ЕСЛИ СЧЕТ ПАССИВНЫЙ И КОРРЕКТИРОВКА ПОЛОЖИТЕЛЬНАЯ И ПРИШЛА из LOST_LINK
			ELSE 
				ROUND(ABS ( DM_ACCOUNT_LINK . AMOUNT_RUB ) / ABS ( TMP_AR_ACCOUNTS . AMOUNT_RUB ) , 8)
			END
		END 
	FROM SESSION . TMP_AR_ACCOUNTS TMP_AR_ACCOUNTS
		JOIN DM_ACCOUNT_LINK DM_ACCOUNT_LINK 
			ON DM_ACCOUNT_LINK . TO_DATE = @V_TO_DATE
				AND DM_ACCOUNT_LINK . ACCOUNT_RK = TMP_AR_ACCOUNTS . ACCOUNT_RK
				AND DM_ACCOUNT_LINK . AMOUNT_RUB <> 0 
    /*JOIN DM_ACCOUNT DM_ACCOUNT_CHAR  ON
      DM_ACCOUNT_CHAR . TO_DATE = @V_TO_DATE
      AND DM_ACCOUNT_CHAR . ACCOUNT_RK = DM_ACCOUNT_LINK . ACCOUNT_RK */
    
		LEFT JOIN SESSION.DM_MAIN_ACCOUNT_LINK DM_MAIN_ACCOUNT_LINK 
			ON -- DM_MAIN_ACCOUNT_LINK . TO_DATE = @V_TO_DATE
				DM_MAIN_ACCOUNT_LINK . DEAL_RK = DM_ACCOUNT_LINK . DEAL_RK
      -- AND DM_MAIN_ACCOUNT_LINK . ACCOUNT_TYPE_ID = 1
  
		LEFT JOIN DM_ACCOUNT 
			ON DM_ACCOUNT . TO_DATE = @V_TO_DATE
				AND DM_ACCOUNT . ACCOUNT_RK = DM_MAIN_ACCOUNT_LINK . ACCOUNT_RK

		LEFT JOIN IDNT_DEAL 
			ON IDNT_DEAL . DEAL_RK = DM_ACCOUNT_LINK . DEAL_RK
      
		LEFT JOIN DM_REPO DM_REPO 
			ON DM_REPO . TO_DATE = @V_TO_DATE
				AND DM_REPO . DEAL_RK = IDNT_DEAL . DEAL_RK ;
  
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.TMP_DEAL;' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
  
	DROP INDEX SESSION.DM_MAIN_ACCOUNT_LINK_IND;
	DROP TABLE SESSION.DM_MAIN_ACCOUNT_LINK;
	
	CREATE INDEX SESSION.TMP_DEAL_IDX ON SESSION.TMP_DEAL (ACCOUNT_RK ASC );
	CREATE INDEX SESSION.TMP_DEAL_IND1 ON SESSION.TMP_DEAL( ACCOUNT_RK, DEAL_RK  );
  
	-- Доведения rate по сделкам до 1

	DECLARE GLOBAL TEMPORARY TABLE SESSION.INCORR_R
	(
		ACCOUNT_RK BIGINT,
		RATE DECIMAL(30,8),
		RATE_DIFF DECIMAL(30,8)
	) WITH REPLACE NOT LOGGED;

	INSERT INTO SESSION.INCORR_R
	SELECT 
		ACCOUNT_RK
		,SUM(RATE),1 - SUM(RATE) 
	FROM SESSION.TMP_DEAL
	GROUP BY ACCOUNT_RK
	HAVING SUM(RATE) BETWEEN @V_MIN_RATE AND @V_MAX_RATE 
		AND SUM(RATE) <> 1; -- значения можно брать, например, из set_list_data

	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.INCORR_R;' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;


	DECLARE GLOBAL TEMPORARY TABLE SESSION.CORR_R
	(
		ACCOUNT_RK BIGINT,
		DEAL_RK BIGINT,
		RATE DECIMAL(30, 8)
	) WITH REPLACE NOT LOGGED;

	INSERT INTO SESSION.CORR_R
	SELECT 
		ACCOUNT_RK, 
		DEAL_RK, 
		COR_RATE 
	FROM (
		SELECT 
			TMP_DEAL.ACCOUNT_RK, 
			TMP_DEAL.DEAL_RK, 
			TMP_DEAL.RATE + INCORR_R.RATE_DIFF AS COR_RATE,
			ROW_NUMBER() OVER(PARTITION BY TMP_DEAL.ACCOUNT_RK ORDER BY TMP_DEAL.RATE DESC) AS NUM
		FROM SESSION.INCORR_R INCORR_R
			JOIN SESSION.TMP_DEAL TMP_DEAL 
				ON INCORR_R.ACCOUNT_RK = TMP_DEAL.ACCOUNT_RK 
	) T 
	WHERE NUM =1;

	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.CORR_R;' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	DROP TABLE SESSION.INCORR_R;

	UPDATE SESSION.TMP_DEAL TMP_DEAL
	SET RATE = (
		SELECT RATE FROM SESSION.CORR_R CORR_R 
		WHERE (CORR_R.ACCOUNT_RK,CORR_R.DEAL_RK) = (TMP_DEAL.ACCOUNT_RK,TMP_DEAL.DEAL_RK))
	WHERE (TMP_DEAL.ACCOUNT_RK, TMP_DEAL.DEAL_RK) IN (SELECT ACCOUNT_RK , DEAL_RK FROM SESSION.CORR_R);

	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.TMP_DEAL - обновление  rate;' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_UPDATED_DATA' , @V_LOG_PARAMETERS ) ;

	DROP TABLE SESSION.CORR_R;
  
	------------------------------------------------------ test table
	IF @V_NEED_TEST = 'Y'
	THEN 
  
		delete from TMP_DEAL
		where to_date = @V_TO_DATE;

		GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
		SET @V_LOG_PARAMETERS = 'SESSION.TMP_DEAL;' || CHAR ( @V_CNT ) ;
		CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_DELETED_DATA' , @V_LOG_PARAMETERS ) ;

		INSERT INTO TMP_DEAL
		select
		@V_TO_DATE, TMP_DEAL.*
		from SESSION . TMP_DEAL TMP_DEAL;

		GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
		SET @V_LOG_PARAMETERS = 'SESSION.TMP_DEAL;' || CHAR ( @V_CNT ) ;
		CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	end if;
	------------------------------------------------------

--4.1.1.6
  
	DECLARE GLOBAL TEMPORARY TABLE SESSION . TMP_KF
	(
		COMPONENT_FUNDED_FLAG CHAR ( 3 ) ,
		RATE DECIMAL ( 30 , 8 )
	) WITH REPLACE NOT LOGGED;
  
	INSERT INTO SESSION . TMP_KF
	SELECT
		'RUR' ,
		DM_INDICATORS_F . COMPONENT_VALUE
	FROM DM_INDICATORS_F
	WHERE DM_INDICATORS_F . TO_DATE = @V_TO_DATE
		AND DM_INDICATORS_F . COMPONENT_CODE = 'KF' 
		AND SCALE=1;
  
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.TMP_KF;' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

  
	INSERT INTO SESSION . TMP_KF
	SELECT
		'VAL' ,
		1 - DM_INDICATORS_F . COMPONENT_VALUE
	FROM DM_INDICATORS_F
	WHERE DM_INDICATORS_F . TO_DATE = @V_TO_DATE
		AND DM_INDICATORS_F . COMPONENT_CODE = 'KF' and scale=1;

	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.TMP_KF;' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	------------------------------------------------------ test table
	IF @V_NEED_TEST = 'Y'
	THEN 

		delete from TMP_KF
		where to_date = @V_TO_DATE;

		GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
		SET @V_LOG_PARAMETERS = 'SESSION.TMP_KF;' || CHAR ( @V_CNT ) ;
		CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_DELETED_DATA' , @V_LOG_PARAMETERS ) ;

		INSERT INTO TMP_KF
		select
			@V_TO_DATE, TMP_KF.*
		from SESSION . TMP_KF TMP_KF;

		GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
		SET @V_LOG_PARAMETERS = 'SESSION.TMP_KF;' || CHAR ( @V_CNT ) ;
		CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	end if;
	------------------------------------------------------
  
	--4.1.1.7
	DECLARE GLOBAL TEMPORARY TABLE SESSION . TMP_ACCOUNT_SECURITY_ISSUE (
		ACCOUNT_RK BIGINT ,
		ISSUE_RK BIGINT ,
		RR_FLAG CHAR ( 3 ) ,
		IS_BUY_BACK_REPO CHAR ( 1 ) ,
		RATE DECIMAL ( 30 , 8 ) ,
		ISSUER_RK BIGINT,
		ACCOUNT_TYPE_ID SMALLINT
	) WITH REPLACE NOT LOGGED;
  
	INSERT INTO SESSION . TMP_ACCOUNT_SECURITY_ISSUE
	SELECT
		DM_SECURITY_ISSUE . ACCOUNT_RK ,
		DM_SECURITY_ISSUE . ISSUE_RK ,
		'N' ,
		'Y' ,
		DM_SECURITY_ISSUE . RATE_EXC ,
		DM_SECURITY . ISSUER_RK,
		DM_SECURITY_ISSUE.ACCOUNT_TYPE_ID
	FROM DM_SECURITY_ISSUE
		JOIN DM_SECURITY 
			ON DM_SECURITY . TO_DATE = @V_TO_DATE
				AND DM_SECURITY . SECURITY_RK = DM_SECURITY_ISSUE . SECURITY_RK
	WHERE DM_SECURITY_ISSUE . TO_DATE = @V_TO_DATE
		AND ( BUY_BACK_QUANTITY > 0 OR DM_SECURITY_ISSUE . AMOUNT_EXC_ACC <> 0 ) ;
  
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.TMP_ACCOUNT_SECURITY_ISSUE (1);' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	INSERT INTO SESSION . TMP_ACCOUNT_SECURITY_ISSUE
	SELECT
		DM_SECURITY_ISSUE . ACCOUNT_RK ,
		DM_SECURITY_ISSUE . ISSUE_RK ,
		case when DM_SECURITY_ISSUE . RR_FLAG='' then  'Y' else DM_SECURITY_ISSUE . RR_FLAG end,
		'N' ,
		DM_SECURITY_ISSUE . RATE_INC ,
		DM_SECURITY . ISSUER_RK,
		DM_SECURITY_ISSUE.ACCOUNT_TYPE_ID
	FROM DM_SECURITY_ISSUE
		JOIN DM_SECURITY DM_SECURITY 
			ON DM_SECURITY . TO_DATE = @V_TO_DATE
				AND DM_SECURITY . SECURITY_RK = DM_SECURITY_ISSUE . SECURITY_RK
	WHERE DM_SECURITY_ISSUE . TO_DATE = @V_TO_DATE
		AND ( 
				( DM_SECURITY_ISSUE . SECURITY_QUANTITY - DM_SECURITY_ISSUE . BUY_BACK_QUANTITY ) > 0 
				OR 
				DM_SECURITY_ISSUE . AMOUNT_INC_ACC <> 0 
			) ;
  
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.TMP_ACCOUNT_SECURITY_ISSUE (2);' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
  
	------------------------------------------------------ test table
	IF @V_NEED_TEST = 'Y' THEN 
  
		delete from TMP_ACCOUNT_SECURITY_ISSUE
		where to_date = @V_TO_DATE;

		GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
		SET @V_LOG_PARAMETERS = 'SESSION.TMP_ACCOUNT_SECURITY_ISSUE;' || CHAR ( @V_CNT ) ;
		CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_DELETED_DATA' , @V_LOG_PARAMETERS ) ;

		INSERT INTO TMP_ACCOUNT_SECURITY_ISSUE
		select
		@V_TO_DATE, TMP_ACCOUNT_SECURITY_ISSUE.*
		from SESSION . TMP_ACCOUNT_SECURITY_ISSUE TMP_ACCOUNT_SECURITY_ISSUE;

		GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
		SET @V_LOG_PARAMETERS = 'SESSION.TMP_ACCOUNT_SECURITY_ISSUE;' || CHAR ( @V_CNT ) ;
		CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	end if;
	------------------------------------------------------

--4.1.1.8
	-- Пока сделано так, может это неправильно!!!!!!!!!!!!! (непонятно как инсертить в пунктах 5.1 и 5.2)
	DECLARE GLOBAL TEMPORARY TABLE SESSION . TMP_INCL_IN_CAPITAL (
		LEDGER_ACCOUNT CHAR ( 5 ) ,
		ACCOUNT_RK BIGINT ,
		DEAL_RK BIGINT ,
		CAPITAL_FLAG CHAR ( 1 ) ,
		RATE DECIMAL ( 30 , 8 )
	) WITH REPLACE NOT LOGGED;
  
	INSERT INTO SESSION . TMP_INCL_IN_CAPITAL
	SELECT
	  DM_CAPITAL_AR_F . LEDGER_ACCOUNT ,
	  DM_CAPITAL_AR_F . ACCOUNT_RK ,
	  DM_CAPITAL_AR_F . DEAL_RK ,
	  'K' ,
	  CASE
		WHEN DM_CAPITAL_AR_F . ACCOUNT_RK IS NULL AND DM_CAPITAL_AR_F . DEAL_RK IS NULL THEN round(DM_CAPITAL_AR_F . AMOUNT_RUB / DM_LEDGER_BALANCE_F . AMOUNT_RUB,8)
		WHEN DM_CAPITAL_AR_F . ACCOUNT_RK IS NOT NULL AND DM_CAPITAL_AR_F . DEAL_RK IS NULL THEN round(DM_CAPITAL_AR_F . AMOUNT_RUB / DM_BALANCE . AMOUNT_RUB,8)
		WHEN DM_CAPITAL_AR_F . ACCOUNT_RK IS NOT NULL AND DM_CAPITAL_AR_F . DEAL_RK IS NOT NULL THEN round(DM_CAPITAL_AR_F . AMOUNT_RUB / DM_ACCOUNT_LINK . AMOUNT_RUB,8)
	  END
    
  FROM DM_CAPITAL_AR_F
    JOIN DM_BALANCE ON
      DM_BALANCE . TO_DATE = @V_TO_DATE
      AND DM_BALANCE . ACCOUNT_RK = DM_CAPITAL_AR_F . ACCOUNT_RK
  
  JOIN DM_ACCOUNT_LINK ON
    DM_ACCOUNT_LINK . TO_DATE = @V_TO_DATE
    AND DM_ACCOUNT_LINK . ACCOUNT_RK = DM_CAPITAL_AR_F . ACCOUNT_RK
    AND DM_ACCOUNT_LINK . DEAL_RK = DM_CAPITAL_AR_F . DEAL_RK
  
  JOIN DM_LEDGER_BALANCE_F ON
    DM_LEDGER_BALANCE_F . TO_DATE = @V_TO_DATE
    AND DM_LEDGER_BALANCE_F . LEDGER_ACCOUNT = DM_CAPITAL_AR_F . LEDGER_ACCOUNT
  
  WHERE DM_CAPITAL_AR_F . TO_DATE = @V_TO_DATE ;
  
  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
  SET @V_LOG_PARAMETERS = 'SESSION.TMP_INCL_IN_CAPITAL (1);' || CHAR ( @V_CNT ) ;
  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
  
  INSERT INTO SESSION . TMP_INCL_IN_CAPITAL
  (
  LEDGER_ACCOUNT ,
  ACCOUNT_RK ,
  DEAL_RK ,
  RATE )
  SELECT
    DM_CAPITAL_AR_F . LEDGER_ACCOUNT ,
    DM_CAPITAL_AR_F . ACCOUNT_RK ,
    DM_CAPITAL_AR_F . DEAL_RK ,
    CASE
      WHEN DM_CAPITAL_AR_F . ACCOUNT_RK IS NULL AND DM_CAPITAL_AR_F . DEAL_RK IS NULL THEN round(( DM_LEDGER_BALANCE_F . AMOUNT_RUB - DM_CAPITAL_AR_F . AMOUNT_RUB ) / DM_LEDGER_BALANCE_F . AMOUNT_RUB,8)
      WHEN DM_CAPITAL_AR_F . ACCOUNT_RK IS NOT NULL AND DM_CAPITAL_AR_F . DEAL_RK IS NULL THEN round(( DM_BALANCE . AMOUNT_RUB - DM_CAPITAL_AR_F . AMOUNT_RUB ) / DM_BALANCE . AMOUNT_RUB,8)
      WHEN DM_CAPITAL_AR_F . ACCOUNT_RK IS NOT NULL AND DM_CAPITAL_AR_F . DEAL_RK IS NOT NULL THEN round(( DM_ACCOUNT_LINK . AMOUNT_RUB - DM_CAPITAL_AR_F . AMOUNT_RUB ) / DM_ACCOUNT_LINK . AMOUNT_RUB,8)
    END
  FROM DM_CAPITAL_AR_F
    JOIN DM_BALANCE ON
      DM_BALANCE . TO_DATE = @V_TO_DATE
      AND DM_BALANCE . ACCOUNT_RK = DM_CAPITAL_AR_F . ACCOUNT_RK
  
    JOIN DM_ACCOUNT_LINK ON
      DM_ACCOUNT_LINK . TO_DATE = @V_TO_DATE
      AND DM_ACCOUNT_LINK . ACCOUNT_RK = DM_CAPITAL_AR_F . ACCOUNT_RK
      AND DM_ACCOUNT_LINK . DEAL_RK = DM_CAPITAL_AR_F . DEAL_RK
  
    JOIN DM_LEDGER_BALANCE_F ON
      DM_LEDGER_BALANCE_F . TO_DATE = @V_TO_DATE
      AND DM_LEDGER_BALANCE_F . LEDGER_ACCOUNT = DM_CAPITAL_AR_F . LEDGER_ACCOUNT
  
  WHERE DM_CAPITAL_AR_F . TO_DATE = @V_TO_DATE ;
  
  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
  SET @V_LOG_PARAMETERS = 'SESSION.TMP_INCL_IN_CAPITAL (2);' || CHAR ( @V_CNT ) ;
  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
  -- Пока сделано так, может это неправильно!!!!!!!!!!!!! (непонятно как инсертить в пунктах 5.1 и 5.2)
  
  ------------------------------------------------------ test table
  IF @V_NEED_TEST = 'Y'
  THEN 
  
	  delete from TMP_INCL_IN_CAPITAL
	  where to_date = @V_TO_DATE;
	  
	  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	  SET @V_LOG_PARAMETERS = 'SESSION.TMP_INCL_IN_CAPITAL;' || CHAR ( @V_CNT ) ;
	  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_DELETED_DATA' , @V_LOG_PARAMETERS ) ;
	  
	  INSERT INTO TMP_INCL_IN_CAPITAL
	  select
	  @V_TO_DATE, TMP_INCL_IN_CAPITAL.*
	  from SESSION . TMP_INCL_IN_CAPITAL TMP_INCL_IN_CAPITAL;
	  
	  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	  SET @V_LOG_PARAMETERS = 'SESSION.TMP_INCL_IN_CAPITAL;' || CHAR ( @V_CNT ) ;
	  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
	  
  end if;
  ------------------------------------------------------
  
-- 4.1.1.9

  DECLARE GLOBAL TEMPORARY TABLE SESSION . TMP_IS_ARRESTED
  (
    ACCOUNT_RK BIGINT ,
    LEDGER_ACCOUNT CHAR ( 5 ) ,
    IS_ARRESTED CHAR ( 1 ) ,
    ARRESTED_AMOUNT_RUB DECIMAL ( 22 , 0 ) ,
    BALANCE_AMOUNT_RUB DECIMAL ( 22 , 0 ) ,
    RATE DECIMAL ( 30 , 8 )
  ) WITH REPLACE not logged;
  
  DECLARE GLOBAL TEMPORARY TABLE SESSION . TMP_ACCOUNT_AREST
  (
  ACCOUNT_RK BIGINT ,
  AMOUNT_CCY DECIMAL ( 22 , 0 ) ,
  AMOUNT_RUB DECIMAL ( 22 , 0 )
  ) WITH REPLACE not logged;
  
  INSERT INTO SESSION . TMP_ACCOUNT_AREST
  
  SELECT
  DM_ACCOUNT_ARREST . ACCOUNT_RK ,
  SUM ( DM_ACCOUNT_ARREST . AMOUNT_CCY ) ,
  SUM ( DM_ACCOUNT_ARREST . AMOUNT_RUB )
  
  FROM DM_ACCOUNT_ARREST
  JOIN SESSION . TMP_AR_ACCOUNTS TMP_AR_ACCOUNTS ON
      TMP_AR_ACCOUNTS . ACCOUNT_RK = DM_ACCOUNT_ARREST . ACCOUNT_RK
  
  WHERE DM_ACCOUNT_ARREST . TO_DATE = @V_TO_DATE
    GROUP BY DM_ACCOUNT_ARREST . ACCOUNT_RK ;
  
  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
  SET @V_LOG_PARAMETERS = 'SESSION.TMP_ACCOUNT_AREST;' || CHAR ( @V_CNT ) ;
  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
  
  INSERT INTO SESSION . TMP_IS_ARRESTED
  SELECT
    TMP_ACCOUNT_AREST . ACCOUNT_RK ,
    DM_ACCOUNT . LEDGER_ACCOUNT ,
    'Y' ,
    MIN ( TMP_ACCOUNT_AREST . AMOUNT_RUB , DM_BALANCE . AMOUNT_RUB ) ,
    DM_BALANCE . AMOUNT_RUB ,
    CASE WHEN DM_BALANCE . AMOUNT_RUB = 0 THEN 0 ELSE
    round (MIN ( TMP_ACCOUNT_AREST . AMOUNT_RUB , DM_BALANCE . AMOUNT_RUB ) / DM_BALANCE . AMOUNT_RUB,8)
    END
    
  FROM SESSION . TMP_ACCOUNT_AREST TMP_ACCOUNT_AREST
    JOIN DM_BALANCE ON
      DM_BALANCE . TO_DATE = @V_TO_DATE
      AND DM_BALANCE . ACCOUNT_RK = TMP_ACCOUNT_AREST . ACCOUNT_RK
  
    JOIN DM_ACCOUNT ON
      DM_ACCOUNT . TO_DATE = @V_TO_DATE
      AND DM_ACCOUNT . ACCOUNT_RK = TMP_ACCOUNT_AREST . ACCOUNT_RK ;
  
  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
  SET @V_LOG_PARAMETERS = 'SESSION.TMP_IS_ARRESTED;' || CHAR ( @V_CNT ) ;
  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
  
  INSERT INTO SESSION . TMP_IS_ARRESTED
  SELECT
    TMP_ACCOUNT_AREST . ACCOUNT_RK ,
    DM_ACCOUNT . LEDGER_ACCOUNT ,
    'N' ,
    DM_BALANCE . AMOUNT_RUB - MIN ( TMP_ACCOUNT_AREST . AMOUNT_RUB , DM_BALANCE . AMOUNT_RUB ) ,
    DM_BALANCE . AMOUNT_RUB ,
    CASE WHEN DM_BALANCE . AMOUNT_RUB = 0 THEN 0 ELSE
    round(( DM_BALANCE . AMOUNT_RUB - MIN ( TMP_ACCOUNT_AREST . AMOUNT_RUB , DM_BALANCE . AMOUNT_RUB ) ) / DM_BALANCE . AMOUNT_RUB,8)
    END
  
  FROM SESSION . TMP_ACCOUNT_AREST TMP_ACCOUNT_AREST
    JOIN DM_BALANCE ON
      DM_BALANCE . TO_DATE = @V_TO_DATE
      AND DM_BALANCE . ACCOUNT_RK = TMP_ACCOUNT_AREST . ACCOUNT_RK
  
    JOIN DM_ACCOUNT ON
      DM_ACCOUNT . TO_DATE = @V_TO_DATE
      AND DM_ACCOUNT . ACCOUNT_RK = TMP_ACCOUNT_AREST . ACCOUNT_RK
      
  WHERE DM_BALANCE . AMOUNT_RUB - MIN ( TMP_ACCOUNT_AREST . AMOUNT_RUB , DM_BALANCE . AMOUNT_RUB ) > 0 ;
  
  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
  SET @V_LOG_PARAMETERS = 'SESSION.TMP_IS_ARRESTED;' || CHAR ( @V_CNT ) ;
  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

  DROP TABLE SESSION . TMP_ACCOUNT_AREST;
  
/*  INSERT INTO SESSION.TMP_IS_ARRESTED -- по БС2 не считаем
  SELECT 
    CAST (NULL AS BIGINT),
    TMP_IS_ARRESTED.LEDGER_ACCOUNT,
    TMP_IS_ARRESTED.IS_ARRESTED,
    SUM(TMP_IS_ARRESTED.ARRESTED_AMOUNT_RUB),
    SUM(TMP_IS_ARRESTED.BALANCE_AMOUNT_RUB),
    case when SUM(TMP_IS_ARRESTED.BALANCE_AMOUNT_RUB)=0 then 0 else
    SUM(TMP_IS_ARRESTED.ARRESTED_AMOUNT_RUB) / SUM(TMP_IS_ARRESTED.BALANCE_AMOUNT_RUB)
    end 
    
  FROM SESSION.TMP_IS_ARRESTED TMP_IS_ARRESTED 
  GROUP BY 
    TMP_IS_ARRESTED.IS_ARRESTED,
    TMP_IS_ARRESTED.LEDGER_ACCOUNT;
  
  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
  SET @V_LOG_PARAMETERS = 'SESSION.TMP_IS_ARRESTED;' || CHAR ( @V_CNT ) ;
  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
*/

------------------------------------------------------ test table
  IF @V_NEED_TEST = 'Y'
  THEN 
  
	  delete from TMP_IS_ARRESTED
	  where to_date = @V_TO_DATE;
	  
	  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	  SET @V_LOG_PARAMETERS = 'SESSION.TMP_IS_ARRESTED;' || CHAR ( @V_CNT ) ;
	  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_DELETED_DATA' , @V_LOG_PARAMETERS ) ;
	  
	  INSERT INTO TMP_IS_ARRESTED
	  select
	  @V_TO_DATE, TMP_IS_ARRESTED.*
	  from SESSION . TMP_IS_ARRESTED TMP_IS_ARRESTED;
	  
	  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	  SET @V_LOG_PARAMETERS = 'SESSION.TMP_IS_ARRESTED;' || CHAR ( @V_CNT ) ;
	  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
	  
  end if;
  ------------------------------------------------------

--4.1.1.10
  DECLARE GLOBAL TEMPORARY TABLE SESSION . TMP_SYNDICATED (
    DEAL_RK BIGINT ,
    SYNDICATE_FLAG CHAR ( 1 ) ,
    COVERED_AMOUNT_RUB DECIMAL ( 22 , 0 ) ,
    DEAL_AMOUNT_RUB DECIMAL ( 22 , 0 ) ,
    CUSTOMER_RK BIGINT ,
    IS_CUST_CHANGE CHAR ( 1 ) ,
    RATE DECIMAL ( 30 , 8 )
  ) WITH REPLACE not logged;
  
  INSERT INTO SESSION . TMP_SYNDICATED
  SELECT
    DM_LOANS . DEAL_RK ,
    '1' ,
    ( DM_LOANS . AMOUNT_CCY * VW_CURRENCY_RATES . RATE ) - DM_LOANS . COVERED_AMOUNT_RUB ,
    ( DM_LOANS . AMOUNT_CCY * VW_CURRENCY_RATES . RATE ) ,
    VALUE ( DM_LOANS . PRINCIPAL_RK , DM_LOANS . PRINCIPAL_RK ) ,
    CASE WHEN DM_LOANS . PRINCIPAL_RK <> DM_LOANS . CUSTOMER_RK THEN 'Y'
      ELSE 'N'
    END ,
    CASE WHEN ( DM_LOANS . AMOUNT_CCY * VW_CURRENCY_RATES . RATE ) = 0 THEN 0
      ELSE 
      round(( ( DM_LOANS . AMOUNT_CCY * VW_CURRENCY_RATES . RATE ) - DM_LOANS . COVERED_AMOUNT_RUB ) / 
      DECIMAL ( ( DM_LOANS . AMOUNT_CCY * VW_CURRENCY_RATES . RATE ) , 22 , 0 ),8) -- делать ли value
    END
  
  FROM DM_LOANS
    JOIN DWH.VW_CURRENCY_RATES VW_CURRENCY_RATES ON
      VW_CURRENCY_RATES . TO_DATE = @V_TO_DATE
      AND VW_CURRENCY_RATES . CURRENCY_CODE = DM_LOANS . CURRENCY_CODE
  
  WHERE DM_LOANS . TO_DATE = @V_TO_DATE
    AND IS_SYNDICATED = 'Y'
    AND DM_LOANS . AMOUNT_CCY * VW_CURRENCY_RATES . RATE - DM_LOANS . COVERED_AMOUNT_RUB <> 0 ;
  
  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
  SET @V_LOG_PARAMETERS = 'SESSION.TMP_SYNDICATED (1);' || CHAR ( @V_CNT ) ;
  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

  INSERT INTO SESSION . TMP_SYNDICATED
  SELECT
    DM_LOANS . DEAL_RK ,
    '2' ,
    DM_LOANS . COVERED_AMOUNT_RUB ,
    ( DM_LOANS . AMOUNT_CCY * VW_CURRENCY_RATES . RATE ) ,
    VALUE ( DM_LOANS . PRINCIPAL_RK , DM_LOANS . CUSTOMER_RK ) ,
    CASE WHEN DM_LOANS . PRINCIPAL_RK <> DM_LOANS . CUSTOMER_RK AND DM_LOANS . PRINCIPAL_RK IS NOT NULL THEN 'Y'
    ELSE 'N' END ,
    CASE WHEN ( DM_LOANS . AMOUNT_CCY * VW_CURRENCY_RATES . RATE ) = 0 THEN 0 ELSE
    DM_LOANS . COVERED_AMOUNT_RUB / DECIMAL ( ( DM_LOANS . AMOUNT_CCY * VW_CURRENCY_RATES . RATE ) , 22 , 0 )
    END
    
  FROM DM_LOANS
    JOIN DWH.VW_CURRENCY_RATES VW_CURRENCY_RATES ON
      VW_CURRENCY_RATES . TO_DATE = @V_TO_DATE
      AND VW_CURRENCY_RATES . CURRENCY_CODE = DM_LOANS . CURRENCY_CODE
  
  WHERE DM_LOANS . TO_DATE = @V_TO_DATE
    AND IS_SYNDICATED = 'Y'
    AND DM_LOANS . COVERED_AMOUNT_RUB <> 0 ;
  
  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
  SET @V_LOG_PARAMETERS = 'SESSION.TMP_SYNDICATED (2);' || CHAR ( @V_CNT ) ;
  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
  
  ------------------------------------------------------ test table
  IF @V_NEED_TEST = 'Y'
  THEN 
  
	  delete from TMP_SYNDICATED
	  where to_date = @V_TO_DATE;
	  
	  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	  SET @V_LOG_PARAMETERS = 'SESSION.TMP_SYNDICATED;' || CHAR ( @V_CNT ) ;
	  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_DELETED_DATA' , @V_LOG_PARAMETERS ) ;
	  
	  INSERT INTO TMP_SYNDICATED
	  select
	  @V_TO_DATE, TMP_SYNDICATED.*
	  from SESSION . TMP_SYNDICATED TMP_SYNDICATED;
	  
	  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	  SET @V_LOG_PARAMETERS = 'SESSION.TMP_SYNDICATED;' || CHAR ( @V_CNT ) ;
	  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
	  
  end if;
  ------------------------------------------------------

--4.1.1.11
  DECLARE GLOBAL TEMPORARY TABLE SESSION . TMP_RESERVE (
    LEDGER_ACCOUNT CHAR ( 5 ) ,
    ACCOUNT_RK BIGINT ,
    DEAL_RK BIGINT ,
    RESERVE_ACCOUNT_RK BIGINT ,
    RESERVE_AMOUNT DECIMAL ( 22 , 0 ) ,
    RESERVE_AMOUNT_SUM DECIMAL ( 22 , 0 ) ,
    RATE DECIMAL ( 30 , 8 )
  ) WITH REPLACE not logged;
  
  
  DECLARE GLOBAL TEMPORARY TABLE SESSION . TMP_RESERVE_SUM_ACC
  (
  ACCOUNT_RK BIGINT ,
  DEAL_RK BIGINT , 
  RESERVE_AMOUNT_SUM DECIMAL ( 22 , 0 )
  ) WITH REPLACE not logged;
  
  DECLARE GLOBAL TEMPORARY TABLE SESSION . TMP_RESERVE_SUM_LEDGER
  (
  LEDGER_ACCOUNT BIGINT ,
  RESERVE_AMOUNT_SUM DECIMAL ( 22 , 0 )
  ) WITH REPLACE not logged;
  
  INSERT INTO SESSION . TMP_RESERVE_SUM_ACC
  SELECT
  DM_RESERVE . ACCOUNT_RK ,
  DM_RESERVE . DEAL_RK ,
  SUM ( DM_RESERVE . RESERVE_AMOUNT )

  FROM DM_RESERVE   
    JOIN SESSION . TMP_AR_ACCOUNTS TMP_AR_ACCOUNTS ON
      TMP_AR_ACCOUNTS . ACCOUNT_RK = DM_RESERVE . ACCOUNT_RK
  
  WHERE DM_RESERVE . TO_DATE = @V_TO_DATE
    GROUP BY DM_RESERVE . ACCOUNT_RK ,
        DM_RESERVE . DEAL_RK;
        
  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
  SET @V_LOG_PARAMETERS = 'SESSION.TMP_RESERVE_SUM_ACC;' || CHAR ( @V_CNT ) ;
  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
    
  INSERT INTO SESSION . TMP_RESERVE_SUM_LEDGER
  SELECT
  DM_ACCOUNT . LEDGER_ACCOUNT ,
  SUM ( DM_RESERVE . RESERVE_AMOUNT )

  FROM DM_RESERVE
    JOIN DM_ACCOUNT ON
      DM_ACCOUNT . TO_DATE = @V_TO_DATE
      AND DM_ACCOUNT . ACCOUNT_RK = DM_RESERVE . ACCOUNT_RK
      
    JOIN SESSION . TMP_AR_ACCOUNTS TMP_AR_ACCOUNTS ON
      TMP_AR_ACCOUNTS . LEDGER_ACCOUNT = DM_ACCOUNT . LEDGER_ACCOUNT
      AND TMP_AR_ACCOUNTS . ACCOUNT_RK IS NULL

  WHERE DM_RESERVE . TO_DATE = @V_TO_DATE
    GROUP BY DM_ACCOUNT . LEDGER_ACCOUNT ;
    
  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
  SET @V_LOG_PARAMETERS = 'SESSION.TMP_RESERVE_SUM_LEDGER;' || CHAR ( @V_CNT ) ;
  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
       
  
  INSERT INTO SESSION . TMP_RESERVE
  SELECT
  DM_ACCOUNT . LEDGER_ACCOUNT ,
  DM_RESERVE . ACCOUNT_RK ,
  DM_RESERVE . DEAL_RK ,
  DM_RESERVE . RESERVE_ACCOUNT_RK ,
  DM_RESERVE . RESERVE_AMOUNT ,
  TMP_RESERVE_SUM_ACC . RESERVE_AMOUNT_SUM ,
  CASE WHEN TMP_RESERVE_SUM_ACC . RESERVE_AMOUNT_SUM = 0 THEN 0
    ELSE round(DM_RESERVE . RESERVE_AMOUNT / TMP_RESERVE_SUM_ACC . RESERVE_AMOUNT_SUM, 8)
  END
  
  FROM DM_RESERVE
    JOIN DM_ACCOUNT ON
      DM_ACCOUNT . TO_DATE = @V_TO_DATE
      AND DM_ACCOUNT . ACCOUNT_RK = DM_RESERVE . ACCOUNT_RK
      
    JOIN SESSION . TMP_RESERVE_SUM_ACC TMP_RESERVE_SUM_ACC ON
      TMP_RESERVE_SUM_ACC . ACCOUNT_RK = DM_ACCOUNT . ACCOUNT_RK
      and TMP_RESERVE_SUM_ACC . DEAL_RK = DM_RESERVE . DEAL_RK
  
  WHERE DM_RESERVE . TO_DATE = @V_TO_DATE 
  and DM_RESERVE . RESERVE_AMOUNT <> 0;
  
  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
  SET @V_LOG_PARAMETERS = 'SESSION.TMP_RESERVE;' || CHAR ( @V_CNT ) ;
  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
  
  DROP TABLE SESSION.TMP_RESERVE_SUM_ACC;
  
  INSERT INTO SESSION . TMP_RESERVE (
	  LEDGER_ACCOUNT ,
	  RESERVE_AMOUNT ,
	  RESERVE_AMOUNT_SUM ,
	  RATE
  )
  SELECT
	  TMP_RESERVE_SUM_LEDGER . LEDGER_ACCOUNT ,
	  RESERVE_AMOUNT_SUM ,
	  RESERVE_AMOUNT_SUM ,
	  1
  FROM SESSION . TMP_RESERVE_SUM_LEDGER TMP_RESERVE_SUM_LEDGER ;

  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
  SET @V_LOG_PARAMETERS = 'SESSION.TMP_RESERVE;' || CHAR ( @V_CNT ) ;
  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
  
  DROP TABLE SESSION.TMP_RESERVE_SUM_LEDGER;
  
  CREATE INDEX SESSION.TMP_RESERVE_IND ON SESSION.TMP_RESERVE
  ( LEDGER_ACCOUNT, DEAL_RK  );

  CREATE INDEX SESSION.TMP_RESERVE_IND1 ON SESSION.TMP_RESERVE
  ( ACCOUNT_RK, DEAL_RK );
  
  CREATE INDEX SESSION.TMP_RESERVE_IND2 ON SESSION.TMP_RESERVE
  ( LEDGER_ACCOUNT );
  
 -- Доведения rate по резервам до 1
	DECLARE GLOBAL TEMPORARY TABLE SESSION.RES_INCORR_R
	(
		ACCOUNT_RK BIGINT,
		DEAL_RK BIGINT,
		RATE DECIMAL(30,8),
		RATE_DIFF DECIMAL(30,8)
	) WITH REPLACE not logged;

	INSERT INTO SESSION.RES_INCORR_R
	SELECT  
		ACCOUNT_RK, 
		DEAL_RK,
		SUM(RATE),
		1 - SUM(RATE) 
	FROM SESSION.TMP_RESERVE
	GROUP BY ACCOUNT_RK, DEAL_RK
	HAVING SUM(RATE) BETWEEN @V_MIN_RATE AND @V_MAX_RATE 
		AND SUM(RATE) <>1; -- значения можно брать, например, из set_list_data

	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.RES_INCORR_R;' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	DECLARE GLOBAL TEMPORARY TABLE SESSION.RES_CORR_R
	(
		ACCOUNT_RK BIGINT,
		DEAL_RK BIGINT,
		RESERVE_ACCOUNT_RK BIGINT,
		RATE DECIMAL(30, 8)
	) WITH REPLACE not logged;

	INSERT INTO SESSION.RES_CORR_R
	SELECT ACCOUNT_RK, DEAL_RK,RESERVE_ACCOUNT_RK, COR_RATE 
	FROM (
		SELECT 
			TMP_RESERVE .ACCOUNT_RK, 
			TMP_RESERVE .DEAL_RK, 
			TMP_RESERVE .RESERVE_ACCOUNT_RK, 
			TMP_RESERVE .RATE + RES_INCORR_R.RATE_DIFF AS COR_RATE,
			ROW_NUMBER() OVER(PARTITION BY TMP_RESERVE.ACCOUNT_RK, TMP_RESERVE.DEAL_RK ORDER BY TMP_RESERVE.RATE DESC) AS NUM
		FROM  SESSION.RES_INCORR_R RES_INCORR_R
			JOIN SESSION.TMP_RESERVE TMP_RESERVE  
				ON RES_INCORR_R.ACCOUNT_RK = TMP_RESERVE .ACCOUNT_RK 
					and RES_INCORR_R.DEAL_RK = TMP_RESERVE.DEAL_RK 
	) T 
	WHERE NUM =1;

	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.RES_CORR_R;' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	DROP TABLE SESSION.RES_INCORR_R;

	UPDATE SESSION.TMP_RESERVE  TMP_RESERVE 
	SET RATE = (
		SELECT RATE FROM SESSION.RES_CORR_R RES_CORR_R 
		WHERE (RES_CORR_R.ACCOUNT_RK, RES_CORR_R.DEAL_RK,RES_CORR_R.RESERVE_ACCOUNT_RK ) = (TMP_RESERVE .ACCOUNT_RK,TMP_RESERVE.DEAL_RK, TMP_RESERVE.RESERVE_ACCOUNT_RK)
	)
	WHERE (TMP_RESERVE .ACCOUNT_RK,TMP_RESERVE .DEAL_RK, TMP_RESERVE.RESERVE_ACCOUNT_RK) IN (SELECT ACCOUNT_RK , DEAL_RK, RESERVE_ACCOUNT_RK FROM SESSION.RES_CORR_R);

	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
	SET @V_LOG_PARAMETERS = 'SESSION.TMP_RESERVE - Обновление rate;' || CHAR ( @V_CNT ) ;
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_UPDATED_DATA' , @V_LOG_PARAMETERS ) ;

	DROP TABLE SESSION.RES_CORR_R;
  
  
  ------------------------------------------------------ test table
  IF @V_NEED_TEST = 'Y'
  THEN 
  
		delete from TMP_RESERVE
		where to_date = @V_TO_DATE;


		GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
		SET @V_LOG_PARAMETERS = 'TMP_RESERVE;' || CHAR ( @V_CNT ) ;
		CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_DELETED_DATA' , @V_LOG_PARAMETERS ) ;

		INSERT INTO TMP_RESERVE
		select
		@V_TO_DATE, TMP_RESERVE.*
		from SESSION . TMP_RESERVE TMP_RESERVE;


		GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
		SET @V_LOG_PARAMETERS = 'TMP_RESERVE;' || CHAR ( @V_CNT ) ;
		CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
  
  end if;
  ------------------------------------------------------
  
--4.1.1.12
  
  --  индексы для оптимизации
  --CREATE INDEX SESSION.TMP_DEAL_IND ON SESSION.TMP_DEAL
  --( DEAL_RK );

 -- CREATE INDEX SESSION.TMP_RESERVE_IND2 ON SESSION.TMP_RESERVE
  --( DEAL_RK );

  CREATE INDEX SESSION.TMP_SYNDICATED_IND ON SESSION.TMP_SYNDICATED
  ( DEAL_RK );

  CREATE INDEX SESSION.TMP_ACCOUNT_SECURITY_ISSUE_IND ON SESSION.TMP_ACCOUNT_SECURITY_ISSUE
  ( ACCOUNT_RK  );        
  
  CREATE INDEX SESSION . TMP_IS_ARRESTED_ind on SESSION . TMP_IS_ARRESTED  (LEDGER_ACCOUNT,  ACCOUNT_RK);
  
  CREATE INDEX SESSION . TMP_INCL_IN_CAPITAL_ind on SESSION . TMP_INCL_IN_CAPITAL (  LEDGER_ACCOUNT,  ACCOUNT_RK , DEAL_RK );
  
  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'STS' , 'index created' , '1' ) ; 
  
  declare global temporary table session.DM_ASSETS_F_TMP
  (
   TO_DATE              DATE,
   ASSET_SK             BIGINT,
   DEAL_RK              BIGINT,
   ACCOUNT_RK           BIGINT,
   CUSTOMER_RK          BIGINT,
   DEAL_NUMBER          VARCHAR(30),
   ISSUER_RK            BIGINT,
   WARRANTY_RK          BIGINT,
   ISSUE_RK             BIGINT,
   FUNDED_FLAG          CHAR(8),
   CAPITAL_FLAG         CHAR(1),
   IS_ARRESTED          CHAR(1),
   RR_FLAG              CHAR(3),
   IS_BUY_BACK_REPO     CHAR(1),
   AGREEMENT_DATE       DATE,
   ISSUE_DATE           DATE,
   PROLONGATION_DATE    DATE,
   ASSET_TYPE           CHAR(8),
   CURRENCY_CODE        CHAR(3),
   LEDGER_ACCOUNT       CHAR(5),
   BANK_PLAN_CODE       CHAR(20),
   AMOUNT_RUB           DECIMAL(22,0),
   TERM_DAYS            BIGINT,
   ACCOUNT_TYPE_ID      SMALLINT,
   PORTFOLIO_RK         BIGINT,
   RESERVE_ACCOUNT_RK   BIGINT,
   RESERVE_AMOUNT       DECIMAL(22,0),
   SYNDICATE_FLAG       CHAR(1),
   PSK                  DECIMAL(22,0),
   IS_CUST_CHANGE       CHAR(1),
   IS_CONSENT_TO_BKI    CHAR(1),
   IS_8947_ACC          CHAR(1),
   IS_FIXED_ASSETS_SUPP_DELAY CHAR(1),
   IS_MORTGAGE_COVERED  CHAR(1),
   IS_TAX_COVERED       CHAR(1),
   IS_TRUST_MNG         CHAR(1),
   PURPOSE_CBRF         BIGINT,
   IS_SHARE_CAPITAL     CHAR(1),
   MULTIPLIER           DECIMAL(30,8),
   MAIN_LEDGER_ACCOUNT  CHAR(5)
  ) with replace not logged;
                                     
   declare global temporary table session.DM_ASSETS_F_TMP1
  (
   DEAL_RK              BIGINT,
   ACCOUNT_RK           BIGINT,
   ISSUER_RK            BIGINT,
   ISSUE_RK             BIGINT,
   FUNDED_FLAG          CHAR(8),
   IS_ARRESTED          CHAR(1),
   RR_FLAG              CHAR(3),
   IS_BUY_BACK_REPO     CHAR(1),
   ASSET_TYPE           CHAR(8),
   CURRENCY_CODE        CHAR(3),
   LEDGER_ACCOUNT       CHAR(5),
   BANK_PLAN_CODE       CHAR(20),
   ACCOUNT_TYPE_ID      SMALLINT,
   IS_8947_ACC          CHAR(1),
   IS_FIXED_ASSETS_SUPP_DELAY CHAR(1),
   
   MAIN_LEDGER_ACCOUNT  CHAR(5)   ,
   
   -- поля связи следующего уровня
   
   TMP_DEAL_ACCOUNT_TYPE_ID       smallint, 
   TMP_KF_COMPONENT_FUNDED_FLAG   char(3),
   -- поля, участвующие в расчёте следующего уровня
   TMP_AR_ACCOUNTS_CUSTOMER_RK    BIGINT,   
   TMP_AR_ACCOUNTS_AMOUNT_RUB     DECIMAL ( 22 , 0 ),
   TMP_DEAL_RATE                  DECIMAL ( 30 , 8 ),
   TMP_IS_ARRESTED_RATE           DECIMAL ( 30 , 8 ),   
   TMP_INCL_IN_CAPITAL_RATE       DECIMAL ( 30 , 8 ),      
   TMP_INCL_IN_CAPITAL_CAP_FLAG   CHAR(1)           ,  
   TMP_KF_RATE                    DECIMAL ( 30 , 8 ),
   TMP_ACC_SECURITY_ISSUE_RATE    DECIMAL ( 30 , 8 ),
   TMP_RESERVE_RATE               DECIMAL ( 30 , 8 ),
   TMP_RESERVE_RESERVE_ACCOUNT_RK BIGINT            ,
   TMP_RESERVE_RESERVE_AMOUNT     DECIMAL ( 22 , 0 ),
   DM_ACC_ATTR_IS_SHARE_CAPITAL   CHAR(1)      
    
    
  ) with replace not logged;
  
  insert 
    into session.DM_ASSETS_F_TMP1 (
		ACCOUNT_RK, 
		FUNDED_FLAG,
		CURRENCY_CODE, 
		LEDGER_ACCOUNT, 
		BANK_PLAN_CODE,
		TMP_KF_COMPONENT_FUNDED_FLAG,
		TMP_AR_ACCOUNTS_CUSTOMER_RK,
		TMP_AR_ACCOUNTS_AMOUNT_RUB,
		TMP_KF_RATE
	)
  SELECT 
		--TMP_DEAL . DEAL_RK AS DEAL_RK ,
         TMP_AR_ACCOUNTS . ACCOUNT_RK AS ACCOUNT_RK ,
         --TMP_ACCOUNT_SECURITY_ISSUE . ISSUER_RK AS ISSUER_RK ,
         --TMP_ACCOUNT_SECURITY_ISSUE . ISSUE_RK AS ISSUE_RK ,
         VALUE ( TMP_KF . COMPONENT_FUNDED_FLAG , 'VAL' ) AS FUNDED_FLAG ,
         --VALUE ( TMP_IS_ARRESTED . IS_ARRESTED , 'N' ) AS IS_ARRESTED ,
         --VALUE ( TMP_ACCOUNT_SECURITY_ISSUE . RR_FLAG , 'N' ) AS RR_FLAG ,
         --VALUE ( TMP_ACCOUNT_SECURITY_ISSUE . IS_BUY_BACK_REPO , 'N' ) AS IS_BUY_BACK_REPO ,
         --TMP_DEAL . ASSET_TYPE AS ASSET_TYPE ,
         TMP_AR_ACCOUNTS . CURRENCY_CODE AS CURRENCY_CODE ,
         TMP_AR_ACCOUNTS . LEDGER_ACCOUNT AS LEDGER_ACCOUNT ,
         TMP_AR_ACCOUNTS . BANK_PLAN_CODE AS BANK_PLAN_CODE ,    
         --value(TMP_ACCOUNT_SECURITY_ISSUE.ACCOUNT_TYPE_ID, TMP_DEAL . ACCOUNT_TYPE_ID) AS ACCOUNT_TYPE_ID , 
         --DM_ACCOUNT_ATTRIBUTE . IS_8947_ACC AS IS_8947_ACC ,
         --DM_ACCOUNT_ATTRIBUTE . IS_FIXED_ASSETS_SUPP_DELAY AS IS_FIXED_ASSETS_SUPP_DELAY ,
        
         --TMP_DEAL . MAIN_LEDGER_ACCOUNT AS MAIN_LEDGER_ACCOUNT                 ,
         
         --TMP_DEAL.ACCOUNT_TYPE_ID            as TMP_DEAL_ACCOUNT_TYPE_ID       ,    
         TMP_KF.COMPONENT_FUNDED_FLAG        as TMP_KF_COMPONENT_FUNDED_FLAG   ,    
         
         TMP_AR_ACCOUNTS.CUSTOMER_RK         as TMP_AR_ACCOUNTS_CUSTOMER_RK    ,    
         TMP_AR_ACCOUNTS.AMOUNT_RUB          as TMP_AR_ACCOUNTS_AMOUNT_RUB     ,    
         --TMP_DEAL.RATE                       as TMP_DEAL_RATE                  ,    
         --TMP_IS_ARRESTED.RATE                as TMP_IS_ARRESTED_RATE           ,    
         --TMP_INCL_IN_CAPITAL.RATE            as TMP_INCL_IN_CAPITAL_RATE       ,    
         --TMP_INCL_IN_CAPITAL.CAPITAL_FLAG    as TMP_INCL_IN_CAPITAL_CAP_FLAG   ,    
         TMP_KF.RATE                         as TMP_KF_RATE                    --,    
         --TMP_ACCOUNT_SECURITY_ISSUE.RATE     as TMP_ACC_SECURITY_ISSUE_RATE    ,    
         --TMP_RESERVE.RATE                    as TMP_RESERVE_RATE               ,    
         --TMP_RESERVE.RESERVE_ACCOUNT_RK      as TMP_RESERVE_RESERVE_ACCOUNT_RK ,    
         --TMP_RESERVE.RESERVE_AMOUNT          as TMP_RESERVE_RESERVE_AMOUNT ,
         --DM_ACCOUNT_ATTRIBUTE.IS_SHARE_CAPITAL as DM_ACC_ATTR_IS_SHARE_CAPITAL       

    FROM SESSION . TMP_AR_ACCOUNTS TMP_AR_ACCOUNTS
		LEFT JOIN SESSION . TMP_KF TMP_KF 
			ON TMP_AR_ACCOUNTS . CURRENCY_CODE = '810';
	
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
    SET @V_LOG_PARAMETERS = 'session.DM_ASSETS_F_TMP1;' || @V_CNT ;
    CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
	
	DROP TABLE SESSION.TMP_AR_ACCOUNTS;
	DROP TABLE SESSION . TMP_KF;
	
	/*
    -- странный способ - для рублевых счетов строки задваиваются (Ignat)
    LEFT JOIN SESSION . TMP_KF TMP_KF ON
      TMP_AR_ACCOUNTS . CURRENCY_CODE = '810'
	*/
	
	declare global temporary table session.DM_ASSETS_F_TMP2
  (
   DEAL_RK              BIGINT,
   ACCOUNT_RK           BIGINT,
   ISSUER_RK            BIGINT,
   ISSUE_RK             BIGINT,
   FUNDED_FLAG          CHAR(8),
   IS_ARRESTED          CHAR(1),
   RR_FLAG              CHAR(3),
   IS_BUY_BACK_REPO     CHAR(1),
   ASSET_TYPE           CHAR(8),
   CURRENCY_CODE        CHAR(3),
   LEDGER_ACCOUNT       CHAR(5),
   BANK_PLAN_CODE       CHAR(20),
   ACCOUNT_TYPE_ID      SMALLINT,
   IS_8947_ACC          CHAR(1),
   IS_FIXED_ASSETS_SUPP_DELAY CHAR(1),
   
   MAIN_LEDGER_ACCOUNT  CHAR(5)   ,
   
   -- поля связи следующего уровня
   
   TMP_DEAL_ACCOUNT_TYPE_ID       smallint, 
   TMP_KF_COMPONENT_FUNDED_FLAG   char(3),
   -- поля, участвующие в расчёте следующего уровня
   TMP_AR_ACCOUNTS_CUSTOMER_RK    BIGINT,   
   TMP_AR_ACCOUNTS_AMOUNT_RUB     DECIMAL ( 22 , 0 ),
   TMP_DEAL_RATE                  DECIMAL ( 30 , 8 ),
   TMP_IS_ARRESTED_RATE           DECIMAL ( 30 , 8 ),   
   TMP_INCL_IN_CAPITAL_RATE       DECIMAL ( 30 , 8 ),      
   TMP_INCL_IN_CAPITAL_CAP_FLAG   CHAR(1)           ,  
   TMP_KF_RATE                    DECIMAL ( 30 , 8 ),
   TMP_ACC_SECURITY_ISSUE_RATE    DECIMAL ( 30 , 8 ),
   TMP_RESERVE_RATE               DECIMAL ( 30 , 8 ),
   TMP_RESERVE_RESERVE_ACCOUNT_RK BIGINT            ,
   TMP_RESERVE_RESERVE_AMOUNT     DECIMAL ( 22 , 0 ),
   DM_ACC_ATTR_IS_SHARE_CAPITAL   CHAR(1)      
    
  ) with replace not logged;
	
	insert 
    into session.DM_ASSETS_F_TMP2 (
		ACCOUNT_RK, 
		FUNDED_FLAG,
		CURRENCY_CODE, 
		LEDGER_ACCOUNT, 
		BANK_PLAN_CODE,
		TMP_KF_COMPONENT_FUNDED_FLAG,
		TMP_AR_ACCOUNTS_CUSTOMER_RK,
		TMP_AR_ACCOUNTS_AMOUNT_RUB,
		TMP_KF_RATE,
		DEAL_RK,
		ASSET_TYPE,
		ACCOUNT_TYPE_ID,
		TMP_DEAL_ACCOUNT_TYPE_ID,            
		TMP_DEAL_RATE
	)
  SELECT 
         DM_ASSETS_F_TMP1.ACCOUNT_RK ,
         DM_ASSETS_F_TMP1.FUNDED_FLAG ,
         DM_ASSETS_F_TMP1.CURRENCY_CODE ,
         DM_ASSETS_F_TMP1.LEDGER_ACCOUNT ,
         DM_ASSETS_F_TMP1.BANK_PLAN_CODE ,        
         DM_ASSETS_F_TMP1.TMP_KF_COMPONENT_FUNDED_FLAG   ,    
         DM_ASSETS_F_TMP1.TMP_AR_ACCOUNTS_CUSTOMER_RK    ,    
         DM_ASSETS_F_TMP1.TMP_AR_ACCOUNTS_AMOUNT_RUB     ,      
         DM_ASSETS_F_TMP1.TMP_KF_RATE                    ,  
		 TMP_DEAL . DEAL_RK,
			TMP_DEAL . ASSET_TYPE,
			TMP_DEAL . ACCOUNT_TYPE_ID,
			TMP_DEAL.ACCOUNT_TYPE_ID,
			TMP_DEAL.RATE
    FROM SESSION . DM_ASSETS_F_TMP1 DM_ASSETS_F_TMP1
		LEFT JOIN SESSION . TMP_DEAL TMP_DEAL 
           ON TMP_DEAL . ACCOUNT_RK = DM_ASSETS_F_TMP1 . ACCOUNT_RK;
			   
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
    SET @V_LOG_PARAMETERS = 'session.DM_ASSETS_F_TMP2 - TMP_DEAL;' || @V_CNT ;
    CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
  
	DROP INDEX SESSION.TMP_DEAL_IND1;
	DROP INDEX SESSION.TMP_DEAL_IDX;
	DROP TABLE SESSION.TMP_DEAL;
	DROP TABLE SESSION.DM_ASSETS_F_TMP1;
	
  /*
    LEFT JOIN SESSION . TMP_DEAL TMP_DEAL 
           ON TMP_DEAL . ACCOUNT_RK = TMP_AR_ACCOUNTS . ACCOUNT_RK
  */
  
  declare global temporary table session.DM_ASSETS_F_TMP3
  (
   DEAL_RK              BIGINT,
   ACCOUNT_RK           BIGINT,
   ISSUER_RK            BIGINT,
   ISSUE_RK             BIGINT,
   FUNDED_FLAG          CHAR(8),
   IS_ARRESTED          CHAR(1),
   RR_FLAG              CHAR(3),
   IS_BUY_BACK_REPO     CHAR(1),
   ASSET_TYPE           CHAR(8),
   CURRENCY_CODE        CHAR(3),
   LEDGER_ACCOUNT       CHAR(5),
   BANK_PLAN_CODE       CHAR(20),
   ACCOUNT_TYPE_ID      SMALLINT,
   IS_8947_ACC          CHAR(1),
   IS_FIXED_ASSETS_SUPP_DELAY CHAR(1),
   
   MAIN_LEDGER_ACCOUNT  CHAR(5)   ,
   
   -- поля связи следующего уровня
   
   TMP_DEAL_ACCOUNT_TYPE_ID       smallint, 
   TMP_KF_COMPONENT_FUNDED_FLAG   char(3),
   -- поля, участвующие в расчёте следующего уровня
   TMP_AR_ACCOUNTS_CUSTOMER_RK    BIGINT,   
   TMP_AR_ACCOUNTS_AMOUNT_RUB     DECIMAL ( 22 , 0 ),
   TMP_DEAL_RATE                  DECIMAL ( 30 , 8 ),
   TMP_IS_ARRESTED_RATE           DECIMAL ( 30 , 8 ),   
   TMP_INCL_IN_CAPITAL_RATE       DECIMAL ( 30 , 8 ),      
   TMP_INCL_IN_CAPITAL_CAP_FLAG   CHAR(1)           ,  
   TMP_KF_RATE                    DECIMAL ( 30 , 8 ),
   TMP_ACC_SECURITY_ISSUE_RATE    DECIMAL ( 30 , 8 ),
   TMP_RESERVE_RATE               DECIMAL ( 30 , 8 ),
   TMP_RESERVE_RESERVE_ACCOUNT_RK BIGINT            ,
   TMP_RESERVE_RESERVE_AMOUNT     DECIMAL ( 22 , 0 ),
   DM_ACC_ATTR_IS_SHARE_CAPITAL   CHAR(1)      
    
  ) with replace not logged;
  
  insert 
    into session.DM_ASSETS_F_TMP3 (
		ACCOUNT_RK, 
		FUNDED_FLAG,
		CURRENCY_CODE, 
		LEDGER_ACCOUNT, 
		BANK_PLAN_CODE,
		TMP_KF_COMPONENT_FUNDED_FLAG,
		TMP_AR_ACCOUNTS_CUSTOMER_RK,
		TMP_AR_ACCOUNTS_AMOUNT_RUB,
		TMP_KF_RATE,
		DEAL_RK,
		ASSET_TYPE,
		ACCOUNT_TYPE_ID,
		TMP_DEAL_ACCOUNT_TYPE_ID,            
		TMP_DEAL_RATE,
		IS_ARRESTED ,
		TMP_IS_ARRESTED_RATE
	)
  SELECT 
        DM_ASSETS_F_TMP2.ACCOUNT_RK ,
        DM_ASSETS_F_TMP2.FUNDED_FLAG ,
        DM_ASSETS_F_TMP2.CURRENCY_CODE ,
        DM_ASSETS_F_TMP2.LEDGER_ACCOUNT ,
        DM_ASSETS_F_TMP2.BANK_PLAN_CODE ,        
        DM_ASSETS_F_TMP2.TMP_KF_COMPONENT_FUNDED_FLAG   ,    
        DM_ASSETS_F_TMP2.TMP_AR_ACCOUNTS_CUSTOMER_RK    ,    
        DM_ASSETS_F_TMP2.TMP_AR_ACCOUNTS_AMOUNT_RUB     ,      
        DM_ASSETS_F_TMP2.TMP_KF_RATE                    ,  
		DM_ASSETS_F_TMP2.DEAL_RK,
		DM_ASSETS_F_TMP2.ASSET_TYPE,
		DM_ASSETS_F_TMP2.ACCOUNT_TYPE_ID,
		DM_ASSETS_F_TMP2.TMP_DEAL_ACCOUNT_TYPE_ID,            
		DM_ASSETS_F_TMP2.TMP_DEAL_RATE,
		VALUE ( TMP_IS_ARRESTED . IS_ARRESTED , 'N' ),
		TMP_IS_ARRESTED.RATE
    FROM SESSION . DM_ASSETS_F_TMP2 DM_ASSETS_F_TMP2
		LEFT JOIN SESSION . TMP_IS_ARRESTED TMP_IS_ARRESTED 
           ON TMP_IS_ARRESTED . LEDGER_ACCOUNT = DM_ASSETS_F_TMP2 . LEDGER_ACCOUNT   
          and value(TMP_IS_ARRESTED . ACCOUNT_RK,  DM_ASSETS_F_TMP2 . ACCOUNT_RK, -1 ) = value(DM_ASSETS_F_TMP2 . ACCOUNT_RK, -1 );
  
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
    SET @V_LOG_PARAMETERS = 'session.DM_ASSETS_F_TMP3 - TMP_IS_ARRESTED;' || @V_CNT ;
    CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_UPDATED_DATA' , @V_LOG_PARAMETERS ) ;

	DROP INDEX SESSION . TMP_IS_ARRESTED_ind;
	DROP TABLE SESSION . TMP_IS_ARRESTED;
	DROP TABLE SESSION.DM_ASSETS_F_TMP2;
	
	/*  
    LEFT JOIN SESSION . TMP_IS_ARRESTED TMP_IS_ARRESTED 
           ON TMP_IS_ARRESTED . LEDGER_ACCOUNT = TMP_AR_ACCOUNTS . LEDGER_ACCOUNT   
          and value(TMP_IS_ARRESTED . ACCOUNT_RK,  TMP_AR_ACCOUNTS . ACCOUNT_RK, -1 ) = value(TMP_AR_ACCOUNTS . ACCOUNT_RK, -1 )   
*/         
	declare global temporary table session.DM_ASSETS_F_TMP4
  (
   DEAL_RK              BIGINT,
   ACCOUNT_RK           BIGINT,
   ISSUER_RK            BIGINT,
   ISSUE_RK             BIGINT,
   FUNDED_FLAG          CHAR(8),
   IS_ARRESTED          CHAR(1),
   RR_FLAG              CHAR(3),
   IS_BUY_BACK_REPO     CHAR(1),
   ASSET_TYPE           CHAR(8),
   CURRENCY_CODE        CHAR(3),
   LEDGER_ACCOUNT       CHAR(5),
   BANK_PLAN_CODE       CHAR(20),
   ACCOUNT_TYPE_ID      SMALLINT,
   IS_8947_ACC          CHAR(1),
   IS_FIXED_ASSETS_SUPP_DELAY CHAR(1),
   
   MAIN_LEDGER_ACCOUNT  CHAR(5)   ,
   
   -- поля связи следующего уровня
   
   TMP_DEAL_ACCOUNT_TYPE_ID       smallint, 
   TMP_KF_COMPONENT_FUNDED_FLAG   char(3),
   -- поля, участвующие в расчёте следующего уровня
   TMP_AR_ACCOUNTS_CUSTOMER_RK    BIGINT,   
   TMP_AR_ACCOUNTS_AMOUNT_RUB     DECIMAL ( 22 , 0 ),
   TMP_DEAL_RATE                  DECIMAL ( 30 , 8 ),
   TMP_IS_ARRESTED_RATE           DECIMAL ( 30 , 8 ),   
   TMP_INCL_IN_CAPITAL_RATE       DECIMAL ( 30 , 8 ),      
   TMP_INCL_IN_CAPITAL_CAP_FLAG   CHAR(1)           ,  
   TMP_KF_RATE                    DECIMAL ( 30 , 8 ),
   TMP_ACC_SECURITY_ISSUE_RATE    DECIMAL ( 30 , 8 ),
   TMP_RESERVE_RATE               DECIMAL ( 30 , 8 ),
   TMP_RESERVE_RESERVE_ACCOUNT_RK BIGINT            ,
   TMP_RESERVE_RESERVE_AMOUNT     DECIMAL ( 22 , 0 ),
   DM_ACC_ATTR_IS_SHARE_CAPITAL   CHAR(1)      
    
  ) with replace not logged;
  
  insert 
    into session.DM_ASSETS_F_TMP4 (
		ACCOUNT_RK, 
		FUNDED_FLAG,
		CURRENCY_CODE, 
		LEDGER_ACCOUNT, 
		BANK_PLAN_CODE,
		TMP_KF_COMPONENT_FUNDED_FLAG,
		TMP_AR_ACCOUNTS_CUSTOMER_RK,
		TMP_AR_ACCOUNTS_AMOUNT_RUB,
		TMP_KF_RATE,
		DEAL_RK,
		ASSET_TYPE,
		ACCOUNT_TYPE_ID,
		TMP_DEAL_ACCOUNT_TYPE_ID,            
		TMP_DEAL_RATE,
		IS_ARRESTED ,
		TMP_IS_ARRESTED_RATE,
		TMP_INCL_IN_CAPITAL_RATE,    
        TMP_INCL_IN_CAPITAL_CAP_FLAG
	)
  SELECT 
        DM_ASSETS_F_TMP3.ACCOUNT_RK ,
        DM_ASSETS_F_TMP3.FUNDED_FLAG ,
        DM_ASSETS_F_TMP3.CURRENCY_CODE ,
        DM_ASSETS_F_TMP3.LEDGER_ACCOUNT ,
        DM_ASSETS_F_TMP3.BANK_PLAN_CODE ,        
        DM_ASSETS_F_TMP3.TMP_KF_COMPONENT_FUNDED_FLAG   ,    
        DM_ASSETS_F_TMP3.TMP_AR_ACCOUNTS_CUSTOMER_RK    ,    
        DM_ASSETS_F_TMP3.TMP_AR_ACCOUNTS_AMOUNT_RUB     ,      
        DM_ASSETS_F_TMP3.TMP_KF_RATE                    ,  
		DM_ASSETS_F_TMP3.DEAL_RK,
		DM_ASSETS_F_TMP3.ASSET_TYPE,
		DM_ASSETS_F_TMP3.ACCOUNT_TYPE_ID,
		DM_ASSETS_F_TMP3.TMP_DEAL_ACCOUNT_TYPE_ID,            
		DM_ASSETS_F_TMP3.TMP_DEAL_RATE,
		DM_ASSETS_F_TMP3.IS_ARRESTED ,
		DM_ASSETS_F_TMP3.TMP_IS_ARRESTED_RATE,
		TMP_INCL_IN_CAPITAL.RATE,    
		TMP_INCL_IN_CAPITAL.CAPITAL_FLAG
    FROM SESSION . DM_ASSETS_F_TMP3 DM_ASSETS_F_TMP3
		LEFT JOIN SESSION . TMP_INCL_IN_CAPITAL TMP_INCL_IN_CAPITAL 
           ON TMP_INCL_IN_CAPITAL . LEDGER_ACCOUNT = DM_ASSETS_F_TMP3 . LEDGER_ACCOUNT
          AND TMP_INCL_IN_CAPITAL . ACCOUNT_RK IS NULL
          AND DM_ASSETS_F_TMP3 . ACCOUNT_RK IS NULL;
  
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
    SET @V_LOG_PARAMETERS = 'session.DM_ASSETS_F_TMP4 - TMP_INCL_IN_CAPITAL;' || @V_CNT ;
    CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
	
	DROP TABLE SESSION.DM_ASSETS_F_TMP3;
     
 /*   
    LEFT JOIN SESSION . TMP_INCL_IN_CAPITAL TMP_INCL_IN_CAPITAL 
           ON TMP_INCL_IN_CAPITAL . LEDGER_ACCOUNT = TMP_AR_ACCOUNTS . LEDGER_ACCOUNT
          AND TMP_INCL_IN_CAPITAL . ACCOUNT_RK IS NULL
          AND TMP_AR_ACCOUNTS . ACCOUNT_RK IS NULL 
*/

	declare global temporary table session.DM_ASSETS_F_TMP5
  (
   DEAL_RK              BIGINT,
   ACCOUNT_RK           BIGINT,
   ISSUER_RK            BIGINT,
   ISSUE_RK             BIGINT,
   FUNDED_FLAG          CHAR(8),
   IS_ARRESTED          CHAR(1),
   RR_FLAG              CHAR(3),
   IS_BUY_BACK_REPO     CHAR(1),
   ASSET_TYPE           CHAR(8),
   CURRENCY_CODE        CHAR(3),
   LEDGER_ACCOUNT       CHAR(5),
   BANK_PLAN_CODE       CHAR(20),
   ACCOUNT_TYPE_ID      SMALLINT,
   IS_8947_ACC          CHAR(1),
   IS_FIXED_ASSETS_SUPP_DELAY CHAR(1),
   
   MAIN_LEDGER_ACCOUNT  CHAR(5)   ,
   
   -- поля связи следующего уровня
   
   TMP_DEAL_ACCOUNT_TYPE_ID       smallint, 
   TMP_KF_COMPONENT_FUNDED_FLAG   char(3),
   -- поля, участвующие в расчёте следующего уровня
   TMP_AR_ACCOUNTS_CUSTOMER_RK    BIGINT,   
   TMP_AR_ACCOUNTS_AMOUNT_RUB     DECIMAL ( 22 , 0 ),
   TMP_DEAL_RATE                  DECIMAL ( 30 , 8 ),
   TMP_IS_ARRESTED_RATE           DECIMAL ( 30 , 8 ),   
   TMP_INCL_IN_CAPITAL_RATE       DECIMAL ( 30 , 8 ),      
   TMP_INCL_IN_CAPITAL_CAP_FLAG   CHAR(1)           ,  
   TMP_KF_RATE                    DECIMAL ( 30 , 8 ),
   TMP_ACC_SECURITY_ISSUE_RATE    DECIMAL ( 30 , 8 ),
   TMP_RESERVE_RATE               DECIMAL ( 30 , 8 ),
   TMP_RESERVE_RESERVE_ACCOUNT_RK BIGINT            ,
   TMP_RESERVE_RESERVE_AMOUNT     DECIMAL ( 22 , 0 ),
   DM_ACC_ATTR_IS_SHARE_CAPITAL   CHAR(1)      
    
  ) with replace not logged;
  
  insert 
    into session.DM_ASSETS_F_TMP5 (
		ACCOUNT_RK, 
		FUNDED_FLAG,
		CURRENCY_CODE, 
		LEDGER_ACCOUNT, 
		BANK_PLAN_CODE,
		TMP_KF_COMPONENT_FUNDED_FLAG,
		TMP_AR_ACCOUNTS_CUSTOMER_RK,
		TMP_AR_ACCOUNTS_AMOUNT_RUB,
		TMP_KF_RATE,
		DEAL_RK,
		ASSET_TYPE,
		ACCOUNT_TYPE_ID,
		TMP_DEAL_ACCOUNT_TYPE_ID,            
		TMP_DEAL_RATE,
		IS_ARRESTED ,
		TMP_IS_ARRESTED_RATE,
		TMP_INCL_IN_CAPITAL_RATE,    
        TMP_INCL_IN_CAPITAL_CAP_FLAG,
		ISSUER_RK ,
        ISSUE_RK ,
		RR_FLAG ,
        IS_BUY_BACK_REPO ,
		TMP_ACC_SECURITY_ISSUE_RATE
	)
  SELECT 
        DM_ASSETS_F_TMP4.ACCOUNT_RK ,
        DM_ASSETS_F_TMP4.FUNDED_FLAG ,
        DM_ASSETS_F_TMP4.CURRENCY_CODE ,
        DM_ASSETS_F_TMP4.LEDGER_ACCOUNT ,
        DM_ASSETS_F_TMP4.BANK_PLAN_CODE ,        
        DM_ASSETS_F_TMP4.TMP_KF_COMPONENT_FUNDED_FLAG   ,    
        DM_ASSETS_F_TMP4.TMP_AR_ACCOUNTS_CUSTOMER_RK    ,    
        DM_ASSETS_F_TMP4.TMP_AR_ACCOUNTS_AMOUNT_RUB     ,      
        DM_ASSETS_F_TMP4.TMP_KF_RATE                    ,  
		DM_ASSETS_F_TMP4.DEAL_RK,
		DM_ASSETS_F_TMP4.ASSET_TYPE,
		VALUE ( TMP_ACCOUNT_SECURITY_ISSUE.ACCOUNT_TYPE_ID, DM_ASSETS_F_TMP4.ACCOUNT_TYPE_ID),
		DM_ASSETS_F_TMP4.TMP_DEAL_ACCOUNT_TYPE_ID,            
		DM_ASSETS_F_TMP4.TMP_DEAL_RATE,
		DM_ASSETS_F_TMP4.IS_ARRESTED ,
		DM_ASSETS_F_TMP4.TMP_IS_ARRESTED_RATE,
		DM_ASSETS_F_TMP4.TMP_INCL_IN_CAPITAL_RATE,    
        DM_ASSETS_F_TMP4.TMP_INCL_IN_CAPITAL_CAP_FLAG,
		TMP_ACCOUNT_SECURITY_ISSUE . ISSUER_RK,
		TMP_ACCOUNT_SECURITY_ISSUE . ISSUE_RK,
		VALUE ( TMP_ACCOUNT_SECURITY_ISSUE.RR_FLAG , 'N' ),
		VALUE ( TMP_ACCOUNT_SECURITY_ISSUE.IS_BUY_BACK_REPO , 'N' ),
		
		TMP_ACCOUNT_SECURITY_ISSUE.RATE
    FROM SESSION . DM_ASSETS_F_TMP4 DM_ASSETS_F_TMP4
		LEFT JOIN SESSION . TMP_ACCOUNT_SECURITY_ISSUE TMP_ACCOUNT_SECURITY_ISSUE 
			ON TMP_ACCOUNT_SECURITY_ISSUE . ACCOUNT_RK = DM_ASSETS_F_TMP4 . ACCOUNT_RK;
  
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
    SET @V_LOG_PARAMETERS = 'session.DM_ASSETS_F_TMP5 - TMP_ACCOUNT_SECURITY_ISSUE;' || @V_CNT ;
    CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	DROP INDEX SESSION.TMP_ACCOUNT_SECURITY_ISSUE_IND;
	DROP TABLE SESSION . TMP_ACCOUNT_SECURITY_ISSUE;
	DROP TABLE SESSION . DM_ASSETS_F_TMP4;
/*
    LEFT JOIN SESSION . TMP_ACCOUNT_SECURITY_ISSUE TMP_ACCOUNT_SECURITY_ISSUE ON
      TMP_ACCOUNT_SECURITY_ISSUE . ACCOUNT_RK = TMP_AR_ACCOUNTS . ACCOUNT_RK
*/

	CREATE INDEX SESSION.DM_ASSETS_F_TMP5_LEDGER_IDX ON SESSION.DM_ASSETS_F_TMP5
	( LEDGER_ACCOUNT  );
	
	CREATE INDEX SESSION.DM_ASSETS_F_TMP5_ACCOUNT_RK_IDX ON SESSION.DM_ASSETS_F_TMP5
	( ACCOUNT_RK  );

	declare global temporary table session.DM_ASSETS_F_TMP6
  (
   DEAL_RK              BIGINT,
   ACCOUNT_RK           BIGINT,
   ISSUER_RK            BIGINT,
   ISSUE_RK             BIGINT,
   FUNDED_FLAG          CHAR(8),
   IS_ARRESTED          CHAR(1),
   RR_FLAG              CHAR(3),
   IS_BUY_BACK_REPO     CHAR(1),
   ASSET_TYPE           CHAR(8),
   CURRENCY_CODE        CHAR(3),
   LEDGER_ACCOUNT       CHAR(5),
   BANK_PLAN_CODE       CHAR(20),
   ACCOUNT_TYPE_ID      SMALLINT,
   IS_8947_ACC          CHAR(1),
   IS_FIXED_ASSETS_SUPP_DELAY CHAR(1),
   
   MAIN_LEDGER_ACCOUNT  CHAR(5)   ,
   
   -- поля связи следующего уровня
   
   TMP_DEAL_ACCOUNT_TYPE_ID       smallint, 
   TMP_KF_COMPONENT_FUNDED_FLAG   char(3),
   -- поля, участвующие в расчёте следующего уровня
   TMP_AR_ACCOUNTS_CUSTOMER_RK    BIGINT,   
   TMP_AR_ACCOUNTS_AMOUNT_RUB     DECIMAL ( 22 , 0 ),
   TMP_DEAL_RATE                  DECIMAL ( 30 , 8 ),
   TMP_IS_ARRESTED_RATE           DECIMAL ( 30 , 8 ),   
   TMP_INCL_IN_CAPITAL_RATE       DECIMAL ( 30 , 8 ),      
   TMP_INCL_IN_CAPITAL_CAP_FLAG   CHAR(1)           ,  
   TMP_KF_RATE                    DECIMAL ( 30 , 8 ),
   TMP_ACC_SECURITY_ISSUE_RATE    DECIMAL ( 30 , 8 ),
   TMP_RESERVE_RATE               DECIMAL ( 30 , 8 ),
   TMP_RESERVE_RESERVE_ACCOUNT_RK BIGINT            ,
   TMP_RESERVE_RESERVE_AMOUNT     DECIMAL ( 22 , 0 ),
   DM_ACC_ATTR_IS_SHARE_CAPITAL   CHAR(1)      
    
  ) with replace not logged;

	insert 
    into session.DM_ASSETS_F_TMP6 (
		ACCOUNT_RK, 
		FUNDED_FLAG,
		CURRENCY_CODE, 
		LEDGER_ACCOUNT, 
		BANK_PLAN_CODE,
		TMP_KF_COMPONENT_FUNDED_FLAG,
		TMP_AR_ACCOUNTS_CUSTOMER_RK,
		TMP_AR_ACCOUNTS_AMOUNT_RUB,
		TMP_KF_RATE,
		DEAL_RK,
		ASSET_TYPE,
		ACCOUNT_TYPE_ID,
		TMP_DEAL_ACCOUNT_TYPE_ID,            
		TMP_DEAL_RATE,
		IS_ARRESTED ,
		TMP_IS_ARRESTED_RATE,
		TMP_INCL_IN_CAPITAL_RATE,    
        TMP_INCL_IN_CAPITAL_CAP_FLAG,
		ISSUER_RK ,
        ISSUE_RK ,
		RR_FLAG ,
        IS_BUY_BACK_REPO ,
		TMP_ACC_SECURITY_ISSUE_RATE,
		TMP_RESERVE_RATE,    
		TMP_RESERVE_RESERVE_ACCOUNT_RK,    
		TMP_RESERVE_RESERVE_AMOUNT
	)
  SELECT 
        DM_ASSETS_F_TMP5.ACCOUNT_RK ,
        DM_ASSETS_F_TMP5.FUNDED_FLAG ,
        DM_ASSETS_F_TMP5.CURRENCY_CODE ,
        DM_ASSETS_F_TMP5.LEDGER_ACCOUNT ,
        DM_ASSETS_F_TMP5.BANK_PLAN_CODE ,        
        DM_ASSETS_F_TMP5.TMP_KF_COMPONENT_FUNDED_FLAG   ,    
        DM_ASSETS_F_TMP5.TMP_AR_ACCOUNTS_CUSTOMER_RK    ,    
        DM_ASSETS_F_TMP5.TMP_AR_ACCOUNTS_AMOUNT_RUB     ,      
        DM_ASSETS_F_TMP5.TMP_KF_RATE                    ,  
		DM_ASSETS_F_TMP5.DEAL_RK,
		DM_ASSETS_F_TMP5.ASSET_TYPE,
		DM_ASSETS_F_TMP5.ACCOUNT_TYPE_ID,
		DM_ASSETS_F_TMP5.TMP_DEAL_ACCOUNT_TYPE_ID,            
		DM_ASSETS_F_TMP5.TMP_DEAL_RATE,
		DM_ASSETS_F_TMP5.IS_ARRESTED ,
		DM_ASSETS_F_TMP5.TMP_IS_ARRESTED_RATE,
		DM_ASSETS_F_TMP5.TMP_INCL_IN_CAPITAL_RATE,    
        DM_ASSETS_F_TMP5.TMP_INCL_IN_CAPITAL_CAP_FLAG,
		DM_ASSETS_F_TMP5.ISSUER_RK ,
        DM_ASSETS_F_TMP5.ISSUE_RK ,
		DM_ASSETS_F_TMP5.RR_FLAG ,
        DM_ASSETS_F_TMP5.IS_BUY_BACK_REPO ,
		DM_ASSETS_F_TMP5.TMP_ACC_SECURITY_ISSUE_RATE,
		TMP_RESERVE.RATE,    
		TMP_RESERVE.RESERVE_ACCOUNT_RK,    
		TMP_RESERVE.RESERVE_AMOUNT
    FROM SESSION . DM_ASSETS_F_TMP5 DM_ASSETS_F_TMP5
		LEFT JOIN SESSION.TMP_RESERVE TMP_RESERVE 
			ON (TMP_RESERVE.LEDGER_ACCOUNT = DM_ASSETS_F_TMP5 . LEDGER_ACCOUNT  
				AND DM_ASSETS_F_TMP5.ACCOUNT_RK IS NULL );
  
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
    SET @V_LOG_PARAMETERS = 'session.DM_ASSETS_F_TMP6 - TMP_RESERVE;' || @V_CNT ;
    CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	DROP INDEX SESSION.DM_ASSETS_F_TMP5_ACCOUNT_RK_IDX;
	DROP INDEX SESSION.DM_ASSETS_F_TMP5_LEDGER_IDX;
	DROP TABLE SESSION.DM_ASSETS_F_TMP5;
/*              
    LEFT JOIN SESSION.TMP_RESERVE TMP_RESERVE ON
      (TMP_RESERVE.LEDGER_ACCOUNT = TMP_AR_ACCOUNTS . LEDGER_ACCOUNT  
      -- это как? разве TMP_AR_ACCOUNTS.ACCOUNT_RK может быть пустым? (by Ignat) 
      AND TMP_AR_ACCOUNTS.ACCOUNT_RK IS NULL )
*/  

	declare global temporary table session.DM_ASSETS_F_TMP7
  (
   DEAL_RK              BIGINT,
   ACCOUNT_RK           BIGINT,
   ISSUER_RK            BIGINT,
   ISSUE_RK             BIGINT,
   FUNDED_FLAG          CHAR(8),
   IS_ARRESTED          CHAR(1),
   RR_FLAG              CHAR(3),
   IS_BUY_BACK_REPO     CHAR(1),
   ASSET_TYPE           CHAR(8),
   CURRENCY_CODE        CHAR(3),
   LEDGER_ACCOUNT       CHAR(5),
   BANK_PLAN_CODE       CHAR(20),
   ACCOUNT_TYPE_ID      SMALLINT,
   IS_8947_ACC          CHAR(1),
   IS_FIXED_ASSETS_SUPP_DELAY CHAR(1),
   
   MAIN_LEDGER_ACCOUNT  CHAR(5)   ,
   
   -- поля связи следующего уровня
   
   TMP_DEAL_ACCOUNT_TYPE_ID       smallint, 
   TMP_KF_COMPONENT_FUNDED_FLAG   char(3),
   -- поля, участвующие в расчёте следующего уровня
   TMP_AR_ACCOUNTS_CUSTOMER_RK    BIGINT,   
   TMP_AR_ACCOUNTS_AMOUNT_RUB     DECIMAL ( 22 , 0 ),
   TMP_DEAL_RATE                  DECIMAL ( 30 , 8 ),
   TMP_IS_ARRESTED_RATE           DECIMAL ( 30 , 8 ),   
   TMP_INCL_IN_CAPITAL_RATE       DECIMAL ( 30 , 8 ),      
   TMP_INCL_IN_CAPITAL_CAP_FLAG   CHAR(1)           ,  
   TMP_KF_RATE                    DECIMAL ( 30 , 8 ),
   TMP_ACC_SECURITY_ISSUE_RATE    DECIMAL ( 30 , 8 ),
   TMP_RESERVE_RATE               DECIMAL ( 30 , 8 ),
   TMP_RESERVE_RESERVE_ACCOUNT_RK BIGINT            ,
   TMP_RESERVE_RESERVE_AMOUNT     DECIMAL ( 22 , 0 ),
   DM_ACC_ATTR_IS_SHARE_CAPITAL   CHAR(1)      
    
  ) with replace not logged;

	insert 
    into session.DM_ASSETS_F_TMP7 (
		ACCOUNT_RK, 
		FUNDED_FLAG,
		CURRENCY_CODE, 
		LEDGER_ACCOUNT, 
		BANK_PLAN_CODE,
		TMP_KF_COMPONENT_FUNDED_FLAG,
		TMP_AR_ACCOUNTS_CUSTOMER_RK,
		TMP_AR_ACCOUNTS_AMOUNT_RUB,
		TMP_KF_RATE,
		DEAL_RK,
		ASSET_TYPE,
		ACCOUNT_TYPE_ID,
		TMP_DEAL_ACCOUNT_TYPE_ID,            
		TMP_DEAL_RATE,
		IS_ARRESTED ,
		TMP_IS_ARRESTED_RATE,
		TMP_INCL_IN_CAPITAL_RATE,    
        TMP_INCL_IN_CAPITAL_CAP_FLAG,
		ISSUER_RK ,
        ISSUE_RK ,
		RR_FLAG ,
        IS_BUY_BACK_REPO ,
		TMP_ACC_SECURITY_ISSUE_RATE,
		TMP_RESERVE_RATE,    
		TMP_RESERVE_RESERVE_ACCOUNT_RK,    
		TMP_RESERVE_RESERVE_AMOUNT,
		IS_8947_ACC ,
		IS_FIXED_ASSETS_SUPP_DELAY ,
		DM_ACC_ATTR_IS_SHARE_CAPITAL
	)
  SELECT 
        DM_ASSETS_F_TMP6.ACCOUNT_RK ,
        DM_ASSETS_F_TMP6.FUNDED_FLAG ,
        DM_ASSETS_F_TMP6.CURRENCY_CODE ,
        DM_ASSETS_F_TMP6.LEDGER_ACCOUNT ,
        DM_ASSETS_F_TMP6.BANK_PLAN_CODE ,        
        DM_ASSETS_F_TMP6.TMP_KF_COMPONENT_FUNDED_FLAG   ,    
        DM_ASSETS_F_TMP6.TMP_AR_ACCOUNTS_CUSTOMER_RK    ,    
        DM_ASSETS_F_TMP6.TMP_AR_ACCOUNTS_AMOUNT_RUB     ,      
        DM_ASSETS_F_TMP6.TMP_KF_RATE                    ,  
		DM_ASSETS_F_TMP6.DEAL_RK,
		DM_ASSETS_F_TMP6.ASSET_TYPE,
		DM_ASSETS_F_TMP6.ACCOUNT_TYPE_ID,
		DM_ASSETS_F_TMP6.TMP_DEAL_ACCOUNT_TYPE_ID,            
		DM_ASSETS_F_TMP6.TMP_DEAL_RATE,
		DM_ASSETS_F_TMP6.IS_ARRESTED ,
		DM_ASSETS_F_TMP6.TMP_IS_ARRESTED_RATE,
		DM_ASSETS_F_TMP6.TMP_INCL_IN_CAPITAL_RATE,    
        DM_ASSETS_F_TMP6.TMP_INCL_IN_CAPITAL_CAP_FLAG,
		DM_ASSETS_F_TMP6.ISSUER_RK ,
        DM_ASSETS_F_TMP6.ISSUE_RK ,
		DM_ASSETS_F_TMP6.RR_FLAG ,
        DM_ASSETS_F_TMP6.IS_BUY_BACK_REPO ,
		DM_ASSETS_F_TMP6.TMP_ACC_SECURITY_ISSUE_RATE,
		DM_ASSETS_F_TMP6.TMP_RESERVE_RATE,    
		DM_ASSETS_F_TMP6.TMP_RESERVE_RESERVE_ACCOUNT_RK,    
		DM_ASSETS_F_TMP6.TMP_RESERVE_RESERVE_AMOUNT,
		DM_ACCOUNT_ATTRIBUTE.IS_8947_ACC,
		DM_ACCOUNT_ATTRIBUTE.IS_FIXED_ASSETS_SUPP_DELAY,
		DM_ACCOUNT_ATTRIBUTE.IS_SHARE_CAPITAL
    FROM SESSION . DM_ASSETS_F_TMP6 DM_ASSETS_F_TMP6
		LEFT JOIN DM_ACCOUNT_ATTRIBUTE 
			ON DM_ACCOUNT_ATTRIBUTE . TO_DATE = @V_TO_DATE
				AND DM_ACCOUNT_ATTRIBUTE . ACCOUNT_RK = DM_ASSETS_F_TMP6 . ACCOUNT_RK ;
	
	
  
	GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
    SET @V_LOG_PARAMETERS = 'session.DM_ASSETS_F_TMP7 - DM_ACCOUNT_ATTRIBUTE;' || @V_CNT ;
    CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

	DROP TABLE SESSION.DM_ASSETS_F_TMP6;
/*    
    -- разделение на атомарные части тут закончено, далее идут доп. атрибуты
 
    LEFT JOIN DM_ACCOUNT_ATTRIBUTE ON
      DM_ACCOUNT_ATTRIBUTE . TO_DATE = @V_TO_DATE
      AND DM_ACCOUNT_ATTRIBUTE . ACCOUNT_RK = TMP_AR_ACCOUNTS . ACCOUNT_RK ;
  -- проверить, даст ли эффект order by ACCOUNT_RK, DEAL_RK
*/ 
/* 
    GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
    SET @V_LOG_PARAMETERS = 'session.DM_ASSETS_F_TMP1;' || @V_CNT ;
    CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
 */   
	
  insert 
    into session.DM_ASSETS_F_TMP
  SELECT @V_TO_DATE AS TO_DATE ,
         ( NEXT VALUE FOR SQ_ASSETSK ) AS ASSET_SK ,
         dat.DEAL_RK AS DEAL_RK ,
         dat.ACCOUNT_RK AS ACCOUNT_RK ,
         VALUE (  TMP_SYNDICATED . CUSTOMER_RK ,
                  DM_LOANS . CUSTOMER_RK ,
                  DM_REPO . CUSTOMER_RK ,
                  DM_FACTORING . CUSTOMER_RK ,
                  dat.TMP_AR_ACCOUNTS_CUSTOMER_RK ) AS CUSTOMER_RK ,
         VALUE ( DM_LOANS . DEAL_NUMBER ,
                  DM_REPO . DEAL_NUMBER ,
                  DM_FACTORING . DEAL_NUMBER ) AS DEAL_NUMBER ,
         dat.ISSUER_RK AS ISSUER_RK ,
         VALUE ( DM_DEAL_NWARRANTY_F . WARRANTY_RK , DM_DEAL_NWARRANTY_F2 . WARRANTY_RK , DM_DEAL_NWARRANTY_F3 . WARRANTY_RK ) AS WARRANTY_RK ,
         dat.ISSUE_RK AS ISSUE_RK ,
         dat.FUNDED_FLAG  AS FUNDED_FLAG ,
         VALUE ( dat.TMP_INCL_IN_CAPITAL_CAP_FLAG , TMP_INCL_IN_CAPITAL2 . CAPITAL_FLAG , TMP_INCL_IN_CAPITAL3 . CAPITAL_FLAG ) AS CAPITAL_FLAG ,
         dat. IS_ARRESTED  AS IS_ARRESTED ,
         dat.  RR_FLAG AS RR_FLAG ,
         dat. IS_BUY_BACK_REPO AS IS_BUY_BACK_REPO ,
         DM_CREDIT_AGREEMENT . AGREEMENT_DATE AS AGREEMENT_DATE ,
         DM_LOANS . ISSUE_DATE AS ISSUE_DATE ,
         DM_LOANS . PROLONGATION_DATE AS PROLONGATION_DATE ,
         dat.ASSET_TYPE AS ASSET_TYPE ,
         dat.CURRENCY_CODE AS CURRENCY_CODE ,
         dat.LEDGER_ACCOUNT AS LEDGER_ACCOUNT ,
         dat.BANK_PLAN_CODE AS BANK_PLAN_CODE ,    

         DECIMAL (round(dat.TMP_AR_ACCOUNTS_AMOUNT_RUB * 
         DECIMAL ( round(DECIMAL (round( DECIMAL (round( DECIMAL (round( DECIMAL (round( DECIMAL (round( DECIMAL (round( VALUE ( dat.TMP_DEAL_RATE, 1 ) *
         VALUE ( DM_DEAL_NWARRANTY_F . RATE , DM_DEAL_NWARRANTY_F2 . RATE , DM_DEAL_NWARRANTY_F3 . RATE , 1 ),8) , 30 , 8 )
         * VALUE ( dat.TMP_KF_RATE , 1 ),8) , 30 , 8 )
         * VALUE ( dat.TMP_ACC_SECURITY_ISSUE_RATE , 1 ),8) , 30 , 8 )
         * VALUE ( dat.TMP_INCL_IN_CAPITAL_RATE  , TMP_INCL_IN_CAPITAL2 . RATE , TMP_INCL_IN_CAPITAL3 . RATE , 1 ),8) , 30 , 8 )
         * VALUE ( dat.TMP_IS_ARRESTED_RATE , 1 ),8) , 30 , 8 )
         * VALUE ( TMP_SYNDICATED . RATE , 1 ),8) , 30 , 8 )
         * VALUE ( dat.TMP_RESERVE_RATE , TMP_RESERVE2 . RATE , TMP_RESERVE3 . RATE , 1 ),8) , 30 , 8 ) ,0), 22 , 0 ) AS AMOUNT_RUB ,
        
         VALUE ( DM_LOANS . TERM_DAYS , DM_REPO . TERM_DAYS ) AS TERM_DAYS ,
         dat. ACCOUNT_TYPE_ID AS ACCOUNT_TYPE_ID , 
         DM_LOANS . PORTFOLIO_RK AS PORTFOLIO_RK ,
         VALUE ( dat.TMP_RESERVE_RESERVE_ACCOUNT_RK , TMP_RESERVE2 . RESERVE_ACCOUNT_RK , TMP_RESERVE3 . RESERVE_ACCOUNT_RK ) AS RESERVE_ACCOUNT_RK ,  

        
         DECIMAL (round(VALUE ( dat.TMP_RESERVE_RESERVE_AMOUNT , TMP_RESERVE2 . RESERVE_AMOUNT , TMP_RESERVE3 . RESERVE_AMOUNT ) *
         DECIMAL ( round(DECIMAL (round( DECIMAL (round( DECIMAL (round( DECIMAL (round( 
         VALUE ( DM_DEAL_NWARRANTY_F . RATE , DM_DEAL_NWARRANTY_F2 . RATE , DM_DEAL_NWARRANTY_F3 . RATE , 1 ) 
         * VALUE ( dat.TMP_KF_RATE , 1 ),8) , 30 , 8 )
         * VALUE ( dat.TMP_ACC_SECURITY_ISSUE_RATE , 1 ),8) , 30 , 8 )
         * VALUE ( dat.TMP_INCL_IN_CAPITAL_RATE, TMP_INCL_IN_CAPITAL2 . RATE , TMP_INCL_IN_CAPITAL3 . RATE , 1 ),8) , 30 , 8 )
         * VALUE ( dat.TMP_IS_ARRESTED_RATE            , 1 ),8) , 30 , 8 )
         * VALUE ( TMP_SYNDICATED . RATE , 1 ),8) , 30 , 8 ),0)
         , 22 , 0 ) AS RESERVE_AMOUNT ,
        
         TMP_SYNDICATED . SYNDICATE_FLAG AS SYNDICATE_FLAG ,
         DM_LOANS . PSK AS PSK ,
         VALUE ( TMP_SYNDICATED . IS_CUST_CHANGE , 'N' ) AS IS_CUST_CHANGE ,
         DM_LOANS . IS_CONSENT_TO_BKI AS IS_CONSENT_TO_BKI ,
         dat. IS_8947_ACC AS IS_8947_ACC ,
         dat.IS_FIXED_ASSETS_SUPP_DELAY AS IS_FIXED_ASSETS_SUPP_DELAY ,
         DM_ISSUE_ATTRIBUTE . IS_MORTGAGE_COVERED AS IS_MORTGAGE_COVERED ,
         CASE 
           WHEN dat . DEAL_RK IS NULL 
           THEN NULL
           ELSE DM_DEAL_ATTRIBUTE . IS_TAX_COVERED
         END AS IS_TAX_COVERED ,
         DM_ISSUE_ATTRIBUTE . IS_TRUST_MNG AS IS_TRUST_MNG ,
         CASE 
           WHEN dat . DEAL_RK IS NULL 
           THEN NULL
           ELSE DM_DEAL_ATTRIBUTE . PURPOSE_CBRF
         END AS PURPOSE_CBRF ,
          VALUE ( DM_DEAL_ATTRIBUTE . IS_SHARE_CAPITAL ,
                 dat.DM_ACC_ATTR_IS_SHARE_CAPITAL ) AS IS_SHARE_CAPITAL ,

         DECIMAL (round( DECIMAL (round( DECIMAL (round( DECIMAL (round( DECIMAL (round(DECIMAL (round( DECIMAL (round(VALUE ( dat.TMP_DEAL_RATE , 1 )*
         VALUE ( DM_DEAL_NWARRANTY_F . RATE , DM_DEAL_NWARRANTY_F2 . RATE , DM_DEAL_NWARRANTY_F3 . RATE , 1 ),8) , 30 , 8 )  
         * VALUE ( dat.TMP_KF_RATE , 1 ),8) , 30 , 8 )   
         * VALUE ( dat.TMP_ACC_SECURITY_ISSUE_RATE     , 1 ),8) , 30 , 8 )
         * VALUE ( dat.TMP_INCL_IN_CAPITAL_RATE , TMP_INCL_IN_CAPITAL2 . RATE , TMP_INCL_IN_CAPITAL3 . RATE , 1 ),8) , 30 , 8 )
         * VALUE ( dat.TMP_IS_ARRESTED_RATE , 1 ),8) , 30 , 8 )
         * VALUE ( TMP_SYNDICATED . RATE , 1 ),8) , 30 , 8 )
         * VALUE ( dat.TMP_RESERVE_RATE , TMP_RESERVE2 . RATE , TMP_RESERVE3 . RATE , 1 ),8) , 30 , 8 ) AS MULTIPLIER,
        
         dat. MAIN_LEDGER_ACCOUNT AS MAIN_LEDGER_ACCOUNT

    FROM session.DM_ASSETS_F_TMP7 dat
  
    
    -- 2nd  
    LEFT JOIN SESSION . TMP_INCL_IN_CAPITAL TMP_INCL_IN_CAPITAL2 ON 
      ( TMP_INCL_IN_CAPITAL2 . LEDGER_ACCOUNT = dat . LEDGER_ACCOUNT
      AND TMP_INCL_IN_CAPITAL2 . ACCOUNT_RK = dat . ACCOUNT_RK
      AND TMP_INCL_IN_CAPITAL2 . DEAL_RK IS NULL
      AND dat . DEAL_RK IS NULL )
    --2nd  
    LEFT JOIN SESSION . TMP_INCL_IN_CAPITAL TMP_INCL_IN_CAPITAL3 ON 
      ( TMP_INCL_IN_CAPITAL3 . LEDGER_ACCOUNT = dat . LEDGER_ACCOUNT
      AND TMP_INCL_IN_CAPITAL3 . ACCOUNT_RK = dat . ACCOUNT_RK
      AND TMP_INCL_IN_CAPITAL3 . DEAL_RK = dat . DEAL_RK ) 

    
     --2nd level  
    LEFT JOIN DM_LOANS ON
      DM_LOANS . TO_DATE = @V_TO_DATE
      AND DM_LOANS . DEAL_RK = dat . DEAL_RK
    
    --2nd
    LEFT JOIN DM_DEAL_NWARRANTY_F ON
      ( DM_DEAL_NWARRANTY_F . DEAL_RK = dat . DEAL_RK
      AND dat . ASSET_TYPE = 'REPOD'
      AND dat . TMP_DEAL_ACCOUNT_TYPE_ID IN ( 10 , 14 , 15 , 12 , 13 )
      AND DM_DEAL_NWARRANTY_F . FUNDED_FLAG = dat.TMP_KF_COMPONENT_FUNDED_FLAG
      AND DM_DEAL_NWARRANTY_F . ACCOUNT_RK = dat . ACCOUNT_RK
      AND DM_DEAL_NWARRANTY_F . TO_DATE = @V_TO_DATE )
    --2nd
    LEFT JOIN DM_DEAL_NWARRANTY_F DM_DEAL_NWARRANTY_F2 ON
      ( DM_DEAL_NWARRANTY_F2 . DEAL_RK = dat . DEAL_RK
      AND dat . ASSET_TYPE = 'REPOI'
      AND dat . TMP_DEAL_ACCOUNT_TYPE_ID IN ( 1 , 5 )
      AND DM_DEAL_NWARRANTY_F2 . FUNDED_FLAG = dat.TMP_KF_COMPONENT_FUNDED_FLAG
      AND DM_DEAL_NWARRANTY_F2 . ACCOUNT_RK = dat . ACCOUNT_RK
      AND DM_DEAL_NWARRANTY_F2 . TO_DATE = @V_TO_DATE )
    --3nd  
    LEFT JOIN DM_DEAL_NWARRANTY_F DM_DEAL_NWARRANTY_F3 ON
      ( DM_DEAL_NWARRANTY_F3 . DEAL_RK = DM_LOANS . CREDIT_AGREEMENT_RK
      AND dat . ASSET_TYPE = 'L'
      AND dat . TMP_DEAL_ACCOUNT_TYPE_ID IN ( 1 , 5 )
      AND DM_DEAL_NWARRANTY_F3 . FUNDED_FLAG = dat.TMP_KF_COMPONENT_FUNDED_FLAG
      AND DM_DEAL_NWARRANTY_F3 . ACCOUNT_RK = dat . ACCOUNT_RK
      AND DM_DEAL_NWARRANTY_F3 . TO_DATE = @V_TO_DATE )
 
    --2nd
    LEFT JOIN SESSION . TMP_SYNDICATED TMP_SYNDICATED ON
      TMP_SYNDICATED . DEAL_RK = dat . DEAL_RK
               
  
    --2nd  
    LEFT JOIN SESSION.TMP_RESERVE TMP_RESERVE2 ON
      (TMP_RESERVE2.ACCOUNT_RK = dat . ACCOUNT_RK
      AND dat.DEAL_RK IS NULL )
    --2nd
    LEFT JOIN SESSION.TMP_RESERVE TMP_RESERVE3 ON
      ( TMP_RESERVE3.ACCOUNT_RK = dat.ACCOUNT_RK
      AND TMP_RESERVE3.DEAL_RK = dat.DEAL_RK )
      
    
    -- разделение на атомарные части тут закончено, далее идут доп. атрибуты
    --3nd
    LEFT JOIN DM_CREDIT_AGREEMENT ON
      DM_CREDIT_AGREEMENT . TO_DATE = @V_TO_DATE
      AND DM_CREDIT_AGREEMENT . DEAL_RK = DM_LOANS . CREDIT_AGREEMENT_RK
    --2nd  
    LEFT JOIN DM_REPO ON
      DM_REPO . TO_DATE = @V_TO_DATE
      AND DM_REPO . DEAL_RK = dat . DEAL_RK
    --2nd  
    LEFT JOIN DM_FACTORING ON
      DM_FACTORING . TO_DATE = @V_TO_DATE
      AND DM_FACTORING . DEAL_RK = dat . DEAL_RK
    
    --2nd  
    LEFT JOIN DM_DEAL_ATTRIBUTE ON
      DM_DEAL_ATTRIBUTE . TO_DATE = @V_TO_DATE
      AND DM_DEAL_ATTRIBUTE . DEAL_RK = dat . DEAL_RK
    --2nd  
    LEFT JOIN DM_ISSUE_ATTRIBUTE ON
      DM_ISSUE_ATTRIBUTE . TO_DATE = @V_TO_DATE
      AND DM_ISSUE_ATTRIBUTE . ISSUE_RK = dat . ISSUE_RK ;
  
      
    GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
    SET @V_LOG_PARAMETERS = 'session.DM_ASSETS_F_TMP;' || @V_CNT ;
    CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
	
	DROP INDEX SESSION.TMP_INCL_IN_CAPITAL_IND;
	DROP TABLE SESSION.TMP_INCL_IN_CAPITAL;
	DROP INDEX SESSION.TMP_SYNDICATED_IND;
	DROP TABLE SESSION.TMP_SYNDICATED;
	DROP INDEX SESSION.TMP_RESERVE_IND;
	DROP INDEX SESSION.TMP_RESERVE_IND1;
	DROP INDEX SESSION.TMP_RESERVE_IND2;
	DROP TABLE SESSION.TMP_RESERVE;
	DROP TABLE SESSION.DM_ASSETS_F_TMP7;

----------- Корректировка multiplier до 1
  DECLARE GLOBAL TEMPORARY TABLE SESSION.INCORR_M
  (
  ACCOUNT_RK BIGINT,
  MULTIPLIER DECIMAL(30,8),
  MULTIPLIER_DIFF DECIMAL(30,8)
  ) WITH REPLACE not logged;

  INSERT INTO SESSION.INCORR_M
  SELECT ACCOUNT_RK
  ,SUM(MULTIPLIER),1 - SUM(MULTIPLIER) FROM 
  session.DM_ASSETS_F_TMP
  GROUP BY ACCOUNT_RK
  HAVING SUM(MULTIPLIER) BETWEEN @V_MIN_RATE AND @V_MAX_RATE AND SUM(MULTIPLIER) <> 1; 
  
  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
  SET @V_LOG_PARAMETERS = 'SESSION.INCORR_M;' || CHAR ( @V_CNT ) ;
  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

  DECLARE GLOBAL TEMPORARY TABLE SESSION.CORR_M
  (
  ASSET_SK BIGINT,
  MULTIPLIER DECIMAL(30, 8)
  ) WITH REPLACE not logged;

  INSERT INTO SESSION.CORR_M
  SELECT ASSET_SK, COR_RATE FROM
  (
  
  SELECT 
  DM_ASSETS_F_TMP.ASSET_SK, 
  DM_ASSETS_F_TMP.MULTIPLIER + INCORR_M.MULTIPLIER_DIFF AS COR_RATE,
  ROW_NUMBER() OVER(PARTITION BY DM_ASSETS_F_TMP.ACCOUNT_RK ORDER BY DM_ASSETS_F_TMP.MULTIPLIER DESC) AS NUM
  
  FROM SESSION.INCORR_M INCORR_M
  JOIN SESSION.DM_ASSETS_F_TMP DM_ASSETS_F_TMP ON INCORR_M.ACCOUNT_RK = DM_ASSETS_F_TMP.ACCOUNT_RK
  ) T 
  WHERE NUM =1;
  
  GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
  SET @V_LOG_PARAMETERS = 'SESSION.CORR_M;' || CHAR ( @V_CNT ) ;
  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;

  DROP TABLE SESSION.INCORR_M;
  
  UPDATE SESSION.DM_ASSETS_F_TMP DM_ASSETS_F_TMP
  SET MULTIPLIER = (SELECT MULTIPLIER FROM  SESSION.CORR_M CORR_M WHERE CORR_M.ASSET_SK = DM_ASSETS_F_TMP.ASSET_SK)
  WHERE   DM_ASSETS_F_TMP.ASSET_SK IN (SELECT ASSET_SK FROM SESSION.CORR_M);

  GET DIAGNOSTICS @V_CNT = ROW_COUNT;
  SET @V_LOG_PARAMETERS = 'SESSION.DM_ASSETS_F_TMP - обновление  multiplier;' || CHAR ( @V_CNT ) ;
  CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'TABLE_UPDATED_DATA' , @V_LOG_PARAMETERS ) ;
  
  DROP TABLE SESSION.CORR_M;
  -----------

  INSERT INTO DM_ASSETS_F
  (
  TO_DATE ,
  ASSET_SK ,
  DEAL_RK ,
  ACCOUNT_RK ,
  CUSTOMER_RK ,
  DEAL_NUMBER ,
  ISSUER_RK ,
  WARRANTY_RK ,
  ISSUE_RK ,
  FUNDED_FLAG ,
  CAPITAL_FLAG ,
  IS_ARRESTED ,
  RR_FLAG ,
  IS_BUY_BACK_REPO ,
  AGREEMENT_DATE ,
  ISSUE_DATE ,
  PROLONGATION_DATE ,
  ASSET_TYPE ,
  CURRENCY_CODE ,
  LEDGER_ACCOUNT ,
  BANK_PLAN_CODE ,
  AMOUNT_RUB ,
  TERM_DAYS ,
  ACCOUNT_TYPE_ID ,
  PORTFOLIO_RK ,
  RESERVE_ACCOUNT_RK ,
  RESERVE_AMOUNT ,
  SYNDICATE_FLAG ,
  PSK ,
  IS_CUST_CHANGE ,
  IS_CONSENT_TO_BKI ,
  IS_8947_ACC ,
  IS_FIXED_ASSETS_SUPP_DELAY ,
  IS_MORTGAGE_COVERED ,
  IS_TAX_COVERED ,
  IS_TRUST_MNG ,
  PURPOSE_CBRF ,
  IS_SHARE_CAPITAL ,
  MULTIPLIER ,
  MAIN_LEDGER_ACCOUNT
  )
  
  SELECT 
  TO_DATE ,
  ASSET_SK ,
  DEAL_RK ,
  ACCOUNT_RK ,
  CUSTOMER_RK ,
  DEAL_NUMBER ,
  ISSUER_RK ,
  WARRANTY_RK ,
  ISSUE_RK ,
  FUNDED_FLAG ,
  CAPITAL_FLAG ,
  IS_ARRESTED ,
  RR_FLAG ,
  IS_BUY_BACK_REPO ,
  AGREEMENT_DATE ,
  ISSUE_DATE ,
  PROLONGATION_DATE ,
  ASSET_TYPE ,
  CURRENCY_CODE ,
  LEDGER_ACCOUNT ,
  BANK_PLAN_CODE ,
  AMOUNT_RUB ,
  TERM_DAYS ,
  ACCOUNT_TYPE_ID ,
  PORTFOLIO_RK ,
  RESERVE_ACCOUNT_RK ,
  RESERVE_AMOUNT ,
  SYNDICATE_FLAG ,
  PSK ,
  IS_CUST_CHANGE ,
  IS_CONSENT_TO_BKI ,
  IS_8947_ACC ,
  IS_FIXED_ASSETS_SUPP_DELAY ,
  IS_MORTGAGE_COVERED ,
  IS_TAX_COVERED ,
  IS_TRUST_MNG ,
  PURPOSE_CBRF ,
  IS_SHARE_CAPITAL ,
  MULTIPLIER ,
  MAIN_LEDGER_ACCOUNT
  FROM SESSION.DM_ASSETS_F_TMP;
  
    GET DIAGNOSTICS @V_CNT = ROW_COUNT ;
    SET @V_LOG_PARAMETERS = 'FILL_DM_ASSETS_F;' || @V_CNT ;
    CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'INF' , 'MART_INSERTED_DATA' , @V_LOG_PARAMETERS ) ;
    
	DROP TABLE SESSION.DM_ASSETS_F_TMP;
	
	CALL LG_MART_ADD ( @V_TO_DATE , @V_ORDER_ID , @V_PROC_NAME , 'END' , 'MART_END' , NULL ) ;
    
END ;
  
  --CALL DWH.CHGAUT2 ('BARS_N1', 'FILL_DM_ASSETS_F', 'PGM', 'DWHDATA');
  
  
